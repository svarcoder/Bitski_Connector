"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitskiConnect = void 0;
const bitski_1 = require("bitski");
const types_1 = require("@web3-react/types");
function parseChainId(chainId) {
    return typeof chainId === 'number' ? chainId : Number.parseInt(chainId, chainId.startsWith('0x') ? 16 : 10);
}
class BitskiConnect extends types_1.Connector {
    constructor({ actions, options }) {
        super(actions);
        this.options = options;
    }
    isomorphicInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.eagerConnection)
                return;
            return (this.eagerConnection = Promise.resolve().then(() => __importStar(require('bitski'))).then((m) => __awaiter(this, void 0, void 0, function* () {
                const { CLIENTID, callBackUrl, network } = this.options;
                console.log("options", this.options, { CLIENTID, callBackUrl, network });
                this.bitski = new bitski_1.Bitski(CLIENTID, callBackUrl, ['offline', 'email']);
                this.provider = this.bitski.getProvider();
                console.log(this.provider, "//");
                this.bitski.signIn().then((e) => {
                    console.log("after signin", { e });
                    this.actions.update({ accounts: e.accounts, chainId: parseChainId(this.provider.currentChainId), });
                }).catch((error) => {
                    if (error.code === bitski_1.AuthenticationErrorCode.UserCancelled) {
                        console.log("err", error);
                    }
                    else {
                        this.provider = undefined;
                        this.eagerConnection = undefined;
                        this.actions.resetState();
                    }
                });
            })));
        });
    }
    /**
     * Initiates a connection.
     * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is
     * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch
     * to the chain, if one of two conditions is met: either they already have it added in their extension, or the
     * argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the
     * specified parameters first, before being prompted to switch.
     * @param bitskiConfig
     */
    activate(desiredChainIdOrChainParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            this.actions.startActivation();
            return this.isomorphicInitialize()
                .then(() => __awaiter(this, void 0, void 0, function* () {
                this.provider = this.bitski.getProvider();
                if (!this.provider)
                    return;
            }))
                .catch((error) => {
                throw error;
            });
        });
    }
    /** {@inheritdoc Connector.deactivate} */
    deactivate() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // we don't unregister the display_uri handler because the walletconnect types/inheritances are really broken.
            // it doesn't matter, anyway, as the connector object is destroyed
            (_a = this.bitski) === null || _a === void 0 ? void 0 : _a.signOut().then((e) => {
                this.provider = undefined;
                this.eagerConnection = undefined;
                this.actions.resetState();
            });
        });
    }
}
exports.BitskiConnect = BitskiConnect;
