import { BitskiSDKOptions } from 'bitski';
import type { Actions, AddEthereumChainParameter, Provider } from '@web3-react/types';
import { Connector } from '@web3-react/types';
declare type BitskiProvider = Provider;
/**
 * @param options - Options to pass to `@metamask/detect-provider`
 * @param onError - Handler to report errors thrown from eventListeners.
 */
export interface BitskiConstructorArgs {
    actions: Actions;
    options?: BitskiSDKOptions;
}
export declare class BitskiConnect extends Connector {
    /** {@inheritdoc Connector.provider} */
    provider?: BitskiProvider | any;
    private readonly options;
    private eagerConnection?;
    bitskiWallet: BitskiSDKOptions | undefined;
    constructor({ actions, options }: BitskiConstructorArgs);
    bitski: any;
    private isomorphicInitialize;
    /**
     * Initiates a connection.
     * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is
     * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch
     * to the chain, if one of two conditions is met: either they already have it added in their extension, or the
     * argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the
     * specified parameters first, before being prompted to switch.
     * @param bitskiConfig
     */
    activate(desiredChainIdOrChainParameters?: number | AddEthereumChainParameter): Promise<void>;
    /** {@inheritdoc Connector.deactivate} */
    deactivate(): Promise<void>;
}
export {};
