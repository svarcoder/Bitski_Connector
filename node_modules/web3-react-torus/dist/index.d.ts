import type { Actions, AddEthereumChainParameter } from "@web3-react/types";
import { Connector } from "@web3-react/types";
/**
 * @param options - Options to pass to `@metamask/detect-provider`
 * @param onError - Handler to report errors thrown from eventListeners.
 */
export interface torusConstructorArgs {
    actions: Actions;
    onError?: (error: Error) => void;
    initOptions?: any;
    constructorOptions?: any;
    loginOptions?: any;
}
export declare class TorusConnector extends Connector {
    /** {@inheritdoc Connector.provider} */
    provider?: any;
    private eagerConnection?;
    private readonly initOptions;
    private readonly constructorOptions;
    private readonly loginOptions;
    torus: any;
    constructor({ actions, onError, initOptions, constructorOptions, loginOptions, }: torusConstructorArgs);
    private isomorphicInitialize;
    /** {@inheritdoc Connector.connectEagerly} */
    connectEagerly(): Promise<void>;
    /**
     * Initiates a connection.
     *
     * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is
     * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch
     * to the chain, if one of two conditions is met: either they already have it added in their extension, or the
     * argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the
     * specified parameters first, before being prompted to switch.
     */
    activate(desiredChainIdOrChainParameters?: number | AddEthereumChainParameter): Promise<void>;
    deactivate(error?: Error): Promise<void>;
}
