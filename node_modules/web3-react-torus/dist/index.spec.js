"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("@web3-react/store");
const _1 = require(".");
const index_spec_1 = require("../../eip1193/src/index.spec");
const chainId = '0x1';
const accounts = [];
describe('TorusConnector', () => {
    let mockProvider;
    beforeEach(() => {
        mockProvider = new index_spec_1.MockEIP1193Provider();
    });
    beforeEach(() => {
        ;
        window.ethereum = mockProvider;
    });
    let store;
    let connector;
    beforeEach(() => {
        let actions;
        [store, actions] = (0, store_1.createWeb3ReactStoreAndActions)();
        connector = new _1.TorusConnector({ actions });
    });
    test('#activate', () => __awaiter(void 0, void 0, void 0, function* () {
        mockProvider.chainId = chainId;
        mockProvider.accounts = accounts;
        yield connector.activate();
        expect(store.getState()).toEqual({
            chainId: Number.parseInt(chainId, 16),
            accounts,
            activating: false,
        });
    }));
});
