"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitskiEngine = void 0;
const provider_engine_1 = __importStar(require("@bitski/provider-engine"));
const provider_error_1 = require("./errors/provider-error");
const nonce_tracker_1 = require("./subproviders/nonce-tracker");
const transaction_validator_1 = require("./subproviders/transaction-validator");
const typed_data_1 = require("./subproviders/typed-data");
class BitskiEngine extends provider_engine_1.default {
    constructor(options) {
        super(options);
        options = options || {};
        // Handles static responses
        this.addProvider(new provider_engine_1.DefaultFixtureSubprovider());
        // Monitors requests to eth_getTransactionCount and eth_sendTransaction to track
        // pending transactions
        this.addProvider(new nonce_tracker_1.NonceTrackerSubprovider());
        // Sanitizes transaction params, removing anything invalid
        this.addProvider(new provider_engine_1.SanitizerSubprovider());
        const enableValidator = !(options && options.disableValidation === true);
        if (enableValidator) {
            // Ensures that transactions are well formed (nonce, gas, gasPrice, from) before they are sent to Bitski
            this.addProvider(new transaction_validator_1.TransactionValidatorSubprovider(options.minGasPrice));
            this.addProvider(new typed_data_1.TypedDataSanitizerSubprovider());
        }
        const enableCache = !(options && options.disableCaching === true);
        if (enableCache) {
            // Block Cache - caches certain requests by their block number
            this.addProvider(new provider_engine_1.BlockCacheSubprovider());
        }
        // Handles subscriptions and filters
        const filterAndSubsSubprovider = new provider_engine_1.SubscriptionsSubprovider();
        // Watch for updates from subscriptions
        filterAndSubsSubprovider.on('data', (_, notification) => {
            this.onMessage(notification);
        });
        this.addProvider(filterAndSubsSubprovider);
        if (enableCache) {
            // Debounces duplicate requests that occur at the same time
            this.addProvider(new provider_engine_1.InflightCacheSubprovider());
        }
    }
    supportsSubscriptions() {
        return this._pollForBlocks;
    }
    subscribe(subscribeMethod = 'eth_subscribe', subscriptionMethod, parameters) {
        if (!this._pollForBlocks) {
            return Promise.reject(provider_error_1.ProviderError.SubscriptionsUnavailable());
        }
        parameters.unshift(subscriptionMethod);
        return this.send(subscribeMethod, parameters);
    }
    unsubscribe(subscriptionId, unsubscribeMethod = 'eth_unsubscribe') {
        if (!this._pollForBlocks) {
            return Promise.reject(provider_error_1.ProviderError.SubscriptionsUnavailable());
        }
        return this.send(unsubscribeMethod, [subscriptionId]).then((response) => {
            if (response) {
                this.removeAllListeners(subscriptionId);
            }
            return response;
        });
    }
    onMessage(notification) {
        // Re-emit (previous behavior ~ web3 1.0.0-beta.37)
        this.emit('data', null, notification);
        if (notification && notification.params && notification.params.subscription) {
            // Current web3 behavior - emit subscription id
            this.emit(notification.params.subscription, notification.params);
        }
    }
}
exports.BitskiEngine = BitskiEngine;
//# sourceMappingURL=bitski-engine.js.map