export var ProviderErrorCode;
(function (ProviderErrorCode) {
    // Thrown when accessing subscription features when they are disabled.
    ProviderErrorCode[ProviderErrorCode["SubscriptionsUnavailable"] = 4000] = "SubscriptionsUnavailable";
    // Thrown when request is missing required params or data
    ProviderErrorCode[ProviderErrorCode["InvalidRequest"] = 4001] = "InvalidRequest";
    // Ethereum chain doesn't exist when attempting to switch
    ProviderErrorCode[ProviderErrorCode["ChainDoesNotExist"] = 4902] = "ChainDoesNotExist";
})(ProviderErrorCode || (ProviderErrorCode = {}));
export class ProviderError extends Error {
    constructor(message, code) {
        super(message);
        this.name = 'ProviderError';
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ProviderError);
        }
        this.code = code;
    }
    static SubscriptionsUnavailable() {
        return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);
    }
    static InvalidRequest(reason) {
        return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);
    }
}
