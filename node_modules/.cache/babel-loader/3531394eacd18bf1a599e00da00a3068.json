{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComposedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass ComposedStore extends ObservableStore_1.ObservableStore {\n  constructor(children) {\n    // Typecast: Preserve existing behavior\n    super({});\n    // subscribe to children\n    this._children = children || {};\n    Object.keys(this._children).forEach(childKey => {\n      const child = this._children[childKey];\n      this._addChild(childKey, child);\n    });\n  }\n  _addChild(childKey, child) {\n    const updateFromChild = childValue => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n}\nexports.ComposedStore = ComposedStore;","map":{"version":3,"sources":["../src/ComposedStore.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA,MAAa,aAEX,SAAQ,iBAAA,CAAA,eAAkB,CAAA;EAG1B,WAAA,CAAY,QAAsD,EAAA;IAChE;IACA,KAAK,CAAC,CAAA,CAAkB,CAAC;IAEzB;IACA,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,CAAA,CAAE;IAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAE,QAAQ,IAAI;MAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;MACtC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC;IACjC,CAAC,CAAC;EACJ;EAEA,SAAS,CAAC,QAAiB,EAAE,KAAkC,EAAA;IAC7D,MAAM,eAAe,GAAI,UAAsB,IAAI;MACjD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;MAC7B,KAAK,CAAC,QAAQ,CAAC,GAAG,UAAU;MAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC;IAChC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;EACnC;AACD;AA3BD,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class ComposedStore<\n  T extends Record<string, Record<string, unknown>>,\n> extends ObservableStore<T> {\n  private _children: Record<keyof T, ObservableStore<T[keyof T]>>;\n\n  constructor(children: Record<keyof T, ObservableStore<T[keyof T]>>) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    // subscribe to children\n    this._children = children || {};\n    Object.keys(this._children).forEach((childKey) => {\n      const child = this._children[childKey];\n      this._addChild(childKey, child);\n    });\n  }\n\n  _addChild(childKey: keyof T, child: ObservableStore<T[keyof T]>) {\n    const updateFromChild = (childValue: T[keyof T]) => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}