{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeAsStream = void 0;\nconst stream_1 = require(\"stream\");\nclass ObservableStoreStream extends stream_1.Duplex {\n  constructor(obsStore) {\n    super({\n      // pass values, not serializations\n      objectMode: true\n    });\n    // dont buffer outgoing updates\n    this.resume();\n    // save handler so we can unsubscribe later\n    this.handler = state => this.push(state);\n    // subscribe to obsStore changes\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  }\n  // emit current state on new destination\n  pipe(dest, options) {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState());\n    return result;\n  }\n  // write from incoming stream to state\n  _write(chunk, _encoding, callback) {\n    this.obsStore.putState(chunk);\n    callback();\n  }\n  // noop - outgoing stream is asking us if we have data we arent giving it\n  _read(_size) {\n    return undefined;\n  }\n  // unsubscribe from event emitter\n  _destroy(err, callback) {\n    this.obsStore.unsubscribe(this.handler);\n    super._destroy(err, callback);\n  }\n}\nfunction storeAsStream(obsStore) {\n  return new ObservableStoreStream(obsStore);\n}\nexports.storeAsStream = storeAsStream;","map":{"version":3,"sources":["../src/asStream.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAIA,MAAM,qBAAyB,SAAQ,QAAA,CAAA,MAAY,CAAA;EAKjD,WAAA,CAAY,QAA4B,EAAA;IACtC,KAAK,CAAC;MACJ;MACA,UAAU,EAAE;KACb,CAAC;IACF;IACA,IAAI,CAAC,MAAM,EAAE;IACb;IACA,IAAI,CAAC,OAAO,GAAI,KAAQ,IAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAC7C;IACA,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;EACvC;EAEA;EACA,IAAI,CACF,IAAO,EACP,OAA2B,EAAA;IAE3B,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAS,CAAC;IAC3C,OAAO,MAAM;EACf;EAEA;EACA,MAAM,CACJ,KAAU,EACV,SAAiB,EACjB,QAAwC,EAAA;IAExC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC7B,QAAQ,EAAE;EACZ;EAEA;EACA,KAAK,CAAC,KAAa,EAAA;IACjB,OAAO,SAAS;EAClB;EAEA;EACA,QAAQ,CAAC,GAAiB,EAAE,QAAuC,EAAA;IACjE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IACvC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC;EAC/B;AACD;AAED,SAAgB,aAAa,CAC3B,QAA4B,EAAA;EAE5B,OAAO,IAAI,qBAAqB,CAAC,QAAQ,CAAC;AAC5C;AAJA,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { Duplex as DuplexStream } from 'stream';\n\nimport { ObservableStore } from './ObservableStore';\n\nclass ObservableStoreStream<T> extends DuplexStream {\n  handler: (state: T) => void;\n\n  obsStore: ObservableStore<T>;\n\n  constructor(obsStore: ObservableStore<T>) {\n    super({\n      // pass values, not serializations\n      objectMode: true,\n    });\n    // dont buffer outgoing updates\n    this.resume();\n    // save handler so we can unsubscribe later\n    this.handler = (state: T) => this.push(state);\n    // subscribe to obsStore changes\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  }\n\n  // emit current state on new destination\n  pipe<U extends NodeJS.WritableStream>(\n    dest: U,\n    options?: { end?: boolean },\n  ): U {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState() as any);\n    return result;\n  }\n\n  // write from incoming stream to state\n  _write(\n    chunk: any,\n    _encoding: string,\n    callback: (error?: Error | null) => void,\n  ): void {\n    this.obsStore.putState(chunk);\n    callback();\n  }\n\n  // noop - outgoing stream is asking us if we have data we arent giving it\n  _read(_size: number): void {\n    return undefined;\n  }\n\n  // unsubscribe from event emitter\n  _destroy(err: Error | null, callback: (error: Error | null) => void): void {\n    this.obsStore.unsubscribe(this.handler);\n    super._destroy(err, callback);\n  }\n}\n\nexport function storeAsStream<T>(\n  obsStore: ObservableStore<T>,\n): ObservableStoreStream<T> {\n  return new ObservableStoreStream(obsStore);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}