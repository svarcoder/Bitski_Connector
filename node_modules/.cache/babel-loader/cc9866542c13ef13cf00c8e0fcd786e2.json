{"ast":null,"code":"import { CoinbaseWallet } from \"@web3-react/coinbase-wallet\";\nimport { MetaMask } from \"@web3-react/metamask\";\nimport { connectorsObject } from \"./connectors\";\nexport const wallets = {\n  metamask: {\n    id: 1,\n    connector: MetaMask,\n    connectWallet: connectorsObject.metamask\n  },\n  coinbase: {\n    id: 2,\n    connector: CoinbaseWallet,\n    connectWallet: connectorsObject.coinbase\n  }\n};\nexport const checkWallet = connector => {\n  const connectorInstant = Object.values(wallets).filter(val => {\n    if (connector instanceof val.connector) {\n      return val.id;\n    }\n  });\n  localStorage.setItem(\"wallet\", JSON.stringify(connectorInstant[0].id));\n};\nexport const selectWalletHooks = () => {\n  //@ts-ignore\n  const walletId = JSON.parse(localStorage.getItem(\"wallet\"));\n  const connectorInstant = Object.values(wallets).filter(val => val.id === walletId);\n  return connectorInstant[0].connectWallet.hooks;\n};","map":{"version":3,"names":["CoinbaseWallet","MetaMask","connectorsObject","wallets","metamask","id","connector","connectWallet","coinbase","checkWallet","connectorInstant","Object","values","filter","val","localStorage","setItem","JSON","stringify","selectWalletHooks","walletId","parse","getItem","hooks"],"sources":["/Users/charvai/Desktop/template/src/helper/walletHelper/WalletHelper.ts"],"sourcesContent":["import { CoinbaseWallet } from \"@web3-react/coinbase-wallet\";\nimport { MetaMask } from \"@web3-react/metamask\";\nimport { connectorsObject } from \"./connectors\";\n\nexport const wallets = {\n  metamask: {\n    id: 1,\n    connector: MetaMask,\n    connectWallet: connectorsObject.metamask,\n  },\n  coinbase: {\n    id: 2,\n    connector: CoinbaseWallet,\n    connectWallet: connectorsObject.coinbase,\n  },\n};\n\nexport const checkWallet = <T>(connector: T): void => {\n  const connectorInstant = Object.values(wallets).filter(\n    (val: { [key: string]: any }) => {\n      if (connector instanceof val.connector) {\n        return val.id;\n      }\n    }\n  );\n  localStorage.setItem(\"wallet\", JSON.stringify(connectorInstant[0].id));\n};\n\nexport const selectWalletHooks = () => {\n  //@ts-ignore\n  const walletId = JSON.parse(localStorage.getItem(\"wallet\"));\n\n  const connectorInstant = Object.values(wallets).filter(\n    (val: { [key: string]: any }) => val.id === walletId\n  );\n  return connectorInstant[0].connectWallet.hooks;\n};\n\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,gBAAgB,QAAQ,cAAc;AAE/C,OAAO,MAAMC,OAAO,GAAG;EACrBC,QAAQ,EAAE;IACRC,EAAE,EAAE,CAAC;IACLC,SAAS,EAAEL,QAAQ;IACnBM,aAAa,EAAEL,gBAAgB,CAACE;EAClC,CAAC;EACDI,QAAQ,EAAE;IACRH,EAAE,EAAE,CAAC;IACLC,SAAS,EAAEN,cAAc;IACzBO,aAAa,EAAEL,gBAAgB,CAACM;EAClC;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAOH,SAAY,IAAW;EACpD,MAAMI,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACT,OAAO,CAAC,CAACU,MAAM,CACnDC,GAA2B,IAAK;IAC/B,IAAIR,SAAS,YAAYQ,GAAG,CAACR,SAAS,EAAE;MACtC,OAAOQ,GAAG,CAACT,EAAE;IACf;EACF,CAAC,CACF;EACDU,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACR,gBAAgB,CAAC,CAAC,CAAC,CAACL,EAAE,CAAC,CAAC;AACxE,CAAC;AAED,OAAO,MAAMc,iBAAiB,GAAG,MAAM;EACrC;EACA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,KAAK,CAACN,YAAY,CAACO,OAAO,CAAC,QAAQ,CAAC,CAAC;EAE3D,MAAMZ,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACT,OAAO,CAAC,CAACU,MAAM,CACnDC,GAA2B,IAAKA,GAAG,CAACT,EAAE,KAAKe,QAAQ,CACrD;EACD,OAAOV,gBAAgB,CAAC,CAAC,CAAC,CAACH,aAAa,CAACgB,KAAK;AAChD,CAAC"},"metadata":{},"sourceType":"module"}