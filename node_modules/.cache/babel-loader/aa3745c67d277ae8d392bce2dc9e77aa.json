{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_init\", void 0);\n    _defineProperty(this, \"_haveSyn\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    _defineProperty(this, \"_target\", void 0);\n    _defineProperty(this, \"_targetWindow\", void 0);\n    _defineProperty(this, \"_targetOrigin\", void 0);\n    _defineProperty(this, \"_onMessage\", void 0);\n    _defineProperty(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n    cb(err);\n  }\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _defineProperty(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _objectSpread$1({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_parent\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(this, \"_substreams\", void 0);\n    _defineProperty(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };","map":{"version":3,"sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"names":["noop","undefined","SYN","ACK","BRK","Duplex","constructor","name","target","targetWindow","window","targetOrigin","objectMode","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","EventEmitter","type","doError","events","_events","error","er","len","listeners","code","Number","isInteger","toString","stringify","stack","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","SerializableError","done","createStreamMiddleware","idMap","readNoop","SafeEventEmitter","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","randomId","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","serializeError","returnHandler","_runReturnHandlers","_checkForCompletion","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_processRequest","_error","mergeMiddleware","engine","forEach","createEngineStream","opts","on","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","Substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","once","eos","readable","writable","setupMultiplex","mux","getStream","streamHelper","pump","BasePostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };\n//# sourceMappingURL=openloginJrpc.esm.js.map\n"]},"metadata":{},"sourceType":"module"}