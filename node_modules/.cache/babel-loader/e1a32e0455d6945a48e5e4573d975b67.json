{"ast":null,"code":"import { BlockCacheSubprovider, DefaultFixtureSubprovider, InflightCacheSubprovider, SanitizerSubprovider, SubscriptionsSubprovider, default as Web3ProviderEngine } from '@bitski/provider-engine';\nimport { ProviderError } from './errors/provider-error';\nimport { NonceTrackerSubprovider } from './subproviders/nonce-tracker';\nimport { TransactionValidatorSubprovider } from './subproviders/transaction-validator';\nimport { TypedDataSanitizerSubprovider } from './subproviders/typed-data';\nexport class BitskiEngine extends Web3ProviderEngine {\n  constructor(options) {\n    super(options);\n    options = options || {};\n    // Handles static responses\n    this.addProvider(new DefaultFixtureSubprovider());\n    // Monitors requests to eth_getTransactionCount and eth_sendTransaction to track\n    // pending transactions\n    this.addProvider(new NonceTrackerSubprovider());\n    // Sanitizes transaction params, removing anything invalid\n    this.addProvider(new SanitizerSubprovider());\n    const enableValidator = !(options && options.disableValidation === true);\n    if (enableValidator) {\n      // Ensures that transactions are well formed (nonce, gas, gasPrice, from) before they are sent to Bitski\n      this.addProvider(new TransactionValidatorSubprovider(options.minGasPrice));\n      this.addProvider(new TypedDataSanitizerSubprovider());\n    }\n    const enableCache = !(options && options.disableCaching === true);\n    if (enableCache) {\n      // Block Cache - caches certain requests by their block number\n      this.addProvider(new BlockCacheSubprovider());\n    }\n    // Handles subscriptions and filters\n    const filterAndSubsSubprovider = new SubscriptionsSubprovider();\n    // Watch for updates from subscriptions\n    filterAndSubsSubprovider.on('data', (_, notification) => {\n      this.onMessage(notification);\n    });\n    this.addProvider(filterAndSubsSubprovider);\n    if (enableCache) {\n      // Debounces duplicate requests that occur at the same time\n      this.addProvider(new InflightCacheSubprovider());\n    }\n  }\n  supportsSubscriptions() {\n    return this._pollForBlocks;\n  }\n  subscribe() {\n    let subscribeMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eth_subscribe';\n    let subscriptionMethod = arguments.length > 1 ? arguments[1] : undefined;\n    let parameters = arguments.length > 2 ? arguments[2] : undefined;\n    if (!this._pollForBlocks) {\n      return Promise.reject(ProviderError.SubscriptionsUnavailable());\n    }\n    parameters.unshift(subscriptionMethod);\n    return this.send(subscribeMethod, parameters);\n  }\n  unsubscribe(subscriptionId) {\n    let unsubscribeMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'eth_unsubscribe';\n    if (!this._pollForBlocks) {\n      return Promise.reject(ProviderError.SubscriptionsUnavailable());\n    }\n    return this.send(unsubscribeMethod, [subscriptionId]).then(response => {\n      if (response) {\n        this.removeAllListeners(subscriptionId);\n      }\n      return response;\n    });\n  }\n  onMessage(notification) {\n    // Re-emit (previous behavior ~ web3 1.0.0-beta.37)\n    this.emit('data', null, notification);\n    if (notification && notification.params && notification.params.subscription) {\n      // Current web3 behavior - emit subscription id\n      this.emit(notification.params.subscription, notification.params);\n    }\n  }\n}","map":{"version":3,"names":["BlockCacheSubprovider","DefaultFixtureSubprovider","InflightCacheSubprovider","SanitizerSubprovider","SubscriptionsSubprovider","default","Web3ProviderEngine","ProviderError","NonceTrackerSubprovider","TransactionValidatorSubprovider","TypedDataSanitizerSubprovider","BitskiEngine","constructor","options","addProvider","enableValidator","disableValidation","minGasPrice","enableCache","disableCaching","filterAndSubsSubprovider","on","_","notification","onMessage","supportsSubscriptions","_pollForBlocks","subscribe","subscribeMethod","subscriptionMethod","parameters","Promise","reject","SubscriptionsUnavailable","unshift","send","unsubscribe","subscriptionId","unsubscribeMethod","then","response","removeAllListeners","emit","params","subscription"],"sources":["/Users/charvai/Desktop/template/node_modules/bitski-provider/dist/bitski-engine.js"],"sourcesContent":["import { BlockCacheSubprovider, DefaultFixtureSubprovider, InflightCacheSubprovider, SanitizerSubprovider, SubscriptionsSubprovider, default as Web3ProviderEngine, } from '@bitski/provider-engine';\nimport { ProviderError } from './errors/provider-error';\nimport { NonceTrackerSubprovider } from './subproviders/nonce-tracker';\nimport { TransactionValidatorSubprovider } from './subproviders/transaction-validator';\nimport { TypedDataSanitizerSubprovider } from './subproviders/typed-data';\nexport class BitskiEngine extends Web3ProviderEngine {\n    constructor(options) {\n        super(options);\n        options = options || {};\n        // Handles static responses\n        this.addProvider(new DefaultFixtureSubprovider());\n        // Monitors requests to eth_getTransactionCount and eth_sendTransaction to track\n        // pending transactions\n        this.addProvider(new NonceTrackerSubprovider());\n        // Sanitizes transaction params, removing anything invalid\n        this.addProvider(new SanitizerSubprovider());\n        const enableValidator = !(options && options.disableValidation === true);\n        if (enableValidator) {\n            // Ensures that transactions are well formed (nonce, gas, gasPrice, from) before they are sent to Bitski\n            this.addProvider(new TransactionValidatorSubprovider(options.minGasPrice));\n            this.addProvider(new TypedDataSanitizerSubprovider());\n        }\n        const enableCache = !(options && options.disableCaching === true);\n        if (enableCache) {\n            // Block Cache - caches certain requests by their block number\n            this.addProvider(new BlockCacheSubprovider());\n        }\n        // Handles subscriptions and filters\n        const filterAndSubsSubprovider = new SubscriptionsSubprovider();\n        // Watch for updates from subscriptions\n        filterAndSubsSubprovider.on('data', (_, notification) => {\n            this.onMessage(notification);\n        });\n        this.addProvider(filterAndSubsSubprovider);\n        if (enableCache) {\n            // Debounces duplicate requests that occur at the same time\n            this.addProvider(new InflightCacheSubprovider());\n        }\n    }\n    supportsSubscriptions() {\n        return this._pollForBlocks;\n    }\n    subscribe(subscribeMethod = 'eth_subscribe', subscriptionMethod, parameters) {\n        if (!this._pollForBlocks) {\n            return Promise.reject(ProviderError.SubscriptionsUnavailable());\n        }\n        parameters.unshift(subscriptionMethod);\n        return this.send(subscribeMethod, parameters);\n    }\n    unsubscribe(subscriptionId, unsubscribeMethod = 'eth_unsubscribe') {\n        if (!this._pollForBlocks) {\n            return Promise.reject(ProviderError.SubscriptionsUnavailable());\n        }\n        return this.send(unsubscribeMethod, [subscriptionId]).then((response) => {\n            if (response) {\n                this.removeAllListeners(subscriptionId);\n            }\n            return response;\n        });\n    }\n    onMessage(notification) {\n        // Re-emit (previous behavior ~ web3 1.0.0-beta.37)\n        this.emit('data', null, notification);\n        if (notification && notification.params && notification.params.subscription) {\n            // Current web3 behavior - emit subscription id\n            this.emit(notification.params.subscription, notification.params);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}