{"ast":null,"code":"import { processCallback } from './-private/utils/callback';\nimport { loadScript } from './load';\nimport { BitskiProvider } from './provider';\nimport { ConnectButton } from './-private/components/connect-button';\nimport { AuthenticationStatus, OAuthSignInMethod } from './-private/constants';\n// Import these directly so we don't load the whole provider bundle\nimport { BinanceSmartChain, BinanceSmartChainTestnet, Goerli, Mainnet, Mumbai, Polygon } from 'bitski-provider/lib/network';\nimport { ProviderErrorCode } from 'bitski-provider';\nimport { toHex } from './-private/utils/numbers';\nexport { AuthenticationError, AuthenticationErrorCode } from './-private/errors/authentication-error';\nexport { ParseError, ParseErrorCode } from './-private/errors/parse-error';\nexport { SignerError, SignerErrorCode } from './-private/errors/signer-error';\nexport { BinanceSmartChain, BinanceSmartChainTestnet, Mainnet, Goerli, Polygon, Mumbai, AuthenticationStatus, OAuthSignInMethod };\nexport class Bitski {\n  /**\n   * @param clientId OAuth Client ID\n   * @param redirectUri Redirect uri, defaults to the current url. This should be the location of your callback html file.\n   * @param additionalScopes To use custom scopes, add them here. The default value is ['offline'].\n   * Note: Make sure your app is approved for the scopes you are requesting first.\n   * @param options Other OAuth settings. Don't change these unless you know what you are doing.\n   */\n  constructor(clientId, redirectUri, additionalScopes, options) {\n    this.sdk = loadScript().then(BitskiSDK => {\n      return BitskiSDK ? new BitskiSDK(clientId, redirectUri, additionalScopes, options) : null;\n    });\n  }\n  /**\n   * Alternative to using our static callback.html file. Call this from your own redirect page.\n   */\n  static callback() {\n    processCallback();\n  }\n  /**\n   * Returns a new web3 provider for a given network.\n   * @param options options for the provider, or a network name\n   */\n  getProvider(options) {\n    var _a;\n    if (typeof window !== 'undefined' && ((_a = window.Bitski) === null || _a === void 0 ? void 0 : _a.getProvider)) {\n      return window.Bitski.getProvider(options);\n    }\n    const network = networkFromProviderOptions(options);\n    if (!this.provider) {\n      this.provider = new BitskiProvider(this.sdk, network !== null && network !== void 0 ? network : Mainnet, typeof options === 'string' ? undefined : options);\n    } else if (network) {\n      this.provider.request({\n        method: 'wallet_switchChain',\n        params: [{\n          chainId: toHex(network.chainId)\n        }]\n      }).catch(async error => {\n        var _a, _b;\n        if (error.code === ProviderErrorCode.ChainDoesNotExist) {\n          await ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.request({\n            method: 'wallet_addChain',\n            params: [{\n              chainId: toHex(network.chainId),\n              rpcUrls: [network.rpcUrl]\n            }]\n          }));\n          await ((_b = this.provider) === null || _b === void 0 ? void 0 : _b.request({\n            method: 'wallet_switchChain',\n            params: [{\n              chainId: toHex(network.chainId)\n            }]\n          }));\n        }\n      });\n      this.provider.start();\n    }\n    return this.provider;\n  }\n  /**\n   * Creates a sign in with bitski button to add to your app. If an HTML element is passed in as the\n   * first parameter, it will automatically add it to the DOM inside that element. Make sure to add\n   * a callback to get notified of login events.\n   * @param options {ConnectButtonOptions} Optional configuration for the button\n   * @param callback Post-login callback. Called when sign in is complete. Not applicable for redirect login method.\n   */\n  getConnectButton(options, callback) {\n    return new ConnectButton(this.sdk, options, callback);\n  }\n  /**\n   * Signs in or connects to bitski depending on the user's auth state.\n   * Since it may open a popup, this method must be called from user interaction handler,\n   * such as a click or tap handler.\n   * @param options Provide SignInOptions for the sign in request. See signIn() for more info.\n   */\n  async start(options) {\n    return this.getSDK().then(sdk => sdk.signInOrConnect(undefined, options));\n  }\n  /**\n   * Check the logged in state of the user\n   */\n  async getAuthStatus() {\n    return this.getSDK().then(sdk => sdk.getAuthStatus());\n  }\n  /**\n   * Starts the sign in flow. Will trigger a popup window over your app, so it must be called within a user interaction handler such as a click.\n   * @param options Optionally provide additional options for the sign in request.\n   *\n   * You can use the options parameter to request that we show the sign up form instead of the sign in form:\n   * ```javascript\n   * import { LOGIN_HINT_SIGNUP } from 'bitski';\n   *\n   * await bitski.signIn({ login_hint: LOGIN_HINT_SIGNUP });\n   * ```\n   */\n  async signIn(options) {\n    return this.getSDK().then(sdk => sdk.signIn(options));\n  }\n  /**\n   * Gets the current signed in user. Will reject if we are not signed in.\n   */\n  async getUser() {\n    return this.getSDK().then(sdk => sdk.getUser());\n  }\n  /**\n   * Connects to bitski to get a valid access token if possible.\n   */\n  async connect() {\n    return this.getSDK().then(sdk => sdk.connect());\n  }\n  /**\n   * Starts redirect sign in flow. This is an alternative flow to the popup that all takes place in the same browser window.\n   * @param options Optionally provide additional options for the sign in request. See signIn() for more info.\n   */\n  signInRedirect(options) {\n    this.getSDK().then(sdk => sdk.signInRedirect(options));\n  }\n  /**\n   * Call from your oauth redirect page.\n   */\n  async redirectCallback() {\n    return this.getSDK().then(sdk => sdk.redirectCallback());\n  }\n  /**\n   * Retrieves the current access token for the user, if logged in.\n   */\n  async getCurrentAccessToken() {\n    return this.getSDK().then(sdk => sdk.getCurrentAccessToken());\n  }\n  /**\n   * Retrieves the current ID token for the user, if logged in.\n   */\n  getCurrentIdToken() {\n    return this.getSDK().then(sdk => sdk.getCurrentIdToken());\n  }\n  /**\n   * Retrieves the current refresh token for the user, if logged in.\n   * Requires that the user has approved your application for offline access.\n   */\n  getCurrentRefreshToken() {\n    return this.getSDK().then(sdk => sdk.getCurrentRefreshToken());\n  }\n  /**\n   * Register a callback to be called on sign out. This is a good practice,\n   * since there may be situations where you are signed out unexpectedly.\n   * @param fn Your callback function\n   */\n  addSignOutHandler(fn) {\n    return this.getSDK().then(sdk => sdk.addSignOutHandler(fn));\n  }\n  /**\n   * Remove a registered signout callback\n   * @param fn Your callback function\n   */\n  removeSignOutHandler(fn) {\n    return this.getSDK().then(sdk => sdk.removeSignOutHandler(fn));\n  }\n  /**\n   * Sign the current user out of your application.\n   */\n  signOut() {\n    return this.getSDK().then(sdk => sdk.signOut());\n  }\n  async getSDK() {\n    const sdk = await this.sdk;\n    if (!sdk) {\n      throw new Error('Bitski SDK not available');\n    }\n    return sdk;\n  }\n}\n// Note: duplicated so we don't include the whole module\nexport const LOGIN_HINT_SIGNUP = 'signup';\nfunction networkFromName(networkName) {\n  switch (networkName) {\n    case '':\n    case 'mainnet':\n      return Mainnet;\n    case 'goerli':\n      return Goerli;\n    case 'polygon':\n      return Polygon;\n    case 'mumbai':\n      return Mumbai;\n    case 'bnb':\n      return BinanceSmartChain;\n    case 'bnbt':\n      return BinanceSmartChainTestnet;\n    default:\n      throw new Error(`Unsupported network name ${networkName}. Try passing a \\`network\\` in the options instead.`);\n  }\n}\nfunction networkFromProviderOptions(options) {\n  if (typeof options === 'string') {\n    return networkFromName(options);\n  }\n  if (options === null || options === void 0 ? void 0 : options.network) {\n    return options.network;\n  }\n  if (options === null || options === void 0 ? void 0 : options.networkName) {\n    return networkFromName(options.networkName);\n  }\n}","map":{"version":3,"names":["processCallback","loadScript","BitskiProvider","ConnectButton","AuthenticationStatus","OAuthSignInMethod","BinanceSmartChain","BinanceSmartChainTestnet","Goerli","Mainnet","Mumbai","Polygon","ProviderErrorCode","toHex","AuthenticationError","AuthenticationErrorCode","ParseError","ParseErrorCode","SignerError","SignerErrorCode","Bitski","constructor","clientId","redirectUri","additionalScopes","options","sdk","then","BitskiSDK","callback","getProvider","_a","window","network","networkFromProviderOptions","provider","undefined","request","method","params","chainId","catch","error","_b","code","ChainDoesNotExist","rpcUrls","rpcUrl","start","getConnectButton","getSDK","signInOrConnect","getAuthStatus","signIn","getUser","connect","signInRedirect","redirectCallback","getCurrentAccessToken","getCurrentIdToken","getCurrentRefreshToken","addSignOutHandler","fn","removeSignOutHandler","signOut","Error","LOGIN_HINT_SIGNUP","networkFromName","networkName"],"sources":["/Users/charvai/Desktop/template/node_modules/bitski/dist/esm/index.js"],"sourcesContent":["import { processCallback } from './-private/utils/callback';\nimport { loadScript } from './load';\nimport { BitskiProvider } from './provider';\nimport { ConnectButton } from './-private/components/connect-button';\nimport { AuthenticationStatus, OAuthSignInMethod } from './-private/constants';\n// Import these directly so we don't load the whole provider bundle\nimport { BinanceSmartChain, BinanceSmartChainTestnet, Goerli, Mainnet, Mumbai, Polygon, } from 'bitski-provider/lib/network';\nimport { ProviderErrorCode } from 'bitski-provider';\nimport { toHex } from './-private/utils/numbers';\nexport { AuthenticationError, AuthenticationErrorCode, } from './-private/errors/authentication-error';\nexport { ParseError, ParseErrorCode } from './-private/errors/parse-error';\nexport { SignerError, SignerErrorCode } from './-private/errors/signer-error';\nexport { BinanceSmartChain, BinanceSmartChainTestnet, Mainnet, Goerli, Polygon, Mumbai, AuthenticationStatus, OAuthSignInMethod, };\nexport class Bitski {\n    /**\n     * @param clientId OAuth Client ID\n     * @param redirectUri Redirect uri, defaults to the current url. This should be the location of your callback html file.\n     * @param additionalScopes To use custom scopes, add them here. The default value is ['offline'].\n     * Note: Make sure your app is approved for the scopes you are requesting first.\n     * @param options Other OAuth settings. Don't change these unless you know what you are doing.\n     */\n    constructor(clientId, redirectUri, additionalScopes, options) {\n        this.sdk = loadScript().then((BitskiSDK) => {\n            return BitskiSDK ? new BitskiSDK(clientId, redirectUri, additionalScopes, options) : null;\n        });\n    }\n    /**\n     * Alternative to using our static callback.html file. Call this from your own redirect page.\n     */\n    static callback() {\n        processCallback();\n    }\n    /**\n     * Returns a new web3 provider for a given network.\n     * @param options options for the provider, or a network name\n     */\n    getProvider(options) {\n        var _a;\n        if (typeof window !== 'undefined' && ((_a = window.Bitski) === null || _a === void 0 ? void 0 : _a.getProvider)) {\n            return window.Bitski.getProvider(options);\n        }\n        const network = networkFromProviderOptions(options);\n        if (!this.provider) {\n            this.provider = new BitskiProvider(this.sdk, network !== null && network !== void 0 ? network : Mainnet, typeof options === 'string' ? undefined : options);\n        }\n        else if (network) {\n            this.provider\n                .request({\n                method: 'wallet_switchChain',\n                params: [{ chainId: toHex(network.chainId) }],\n            })\n                .catch(async (error) => {\n                var _a, _b;\n                if (error.code === ProviderErrorCode.ChainDoesNotExist) {\n                    await ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.request({\n                        method: 'wallet_addChain',\n                        params: [\n                            {\n                                chainId: toHex(network.chainId),\n                                rpcUrls: [network.rpcUrl],\n                            },\n                        ],\n                    }));\n                    await ((_b = this.provider) === null || _b === void 0 ? void 0 : _b.request({\n                        method: 'wallet_switchChain',\n                        params: [{ chainId: toHex(network.chainId) }],\n                    }));\n                }\n            });\n            this.provider.start();\n        }\n        return this.provider;\n    }\n    /**\n     * Creates a sign in with bitski button to add to your app. If an HTML element is passed in as the\n     * first parameter, it will automatically add it to the DOM inside that element. Make sure to add\n     * a callback to get notified of login events.\n     * @param options {ConnectButtonOptions} Optional configuration for the button\n     * @param callback Post-login callback. Called when sign in is complete. Not applicable for redirect login method.\n     */\n    getConnectButton(options, callback) {\n        return new ConnectButton(this.sdk, options, callback);\n    }\n    /**\n     * Signs in or connects to bitski depending on the user's auth state.\n     * Since it may open a popup, this method must be called from user interaction handler,\n     * such as a click or tap handler.\n     * @param options Provide SignInOptions for the sign in request. See signIn() for more info.\n     */\n    async start(options) {\n        return this.getSDK().then((sdk) => sdk.signInOrConnect(undefined, options));\n    }\n    /**\n     * Check the logged in state of the user\n     */\n    async getAuthStatus() {\n        return this.getSDK().then((sdk) => sdk.getAuthStatus());\n    }\n    /**\n     * Starts the sign in flow. Will trigger a popup window over your app, so it must be called within a user interaction handler such as a click.\n     * @param options Optionally provide additional options for the sign in request.\n     *\n     * You can use the options parameter to request that we show the sign up form instead of the sign in form:\n     * ```javascript\n     * import { LOGIN_HINT_SIGNUP } from 'bitski';\n     *\n     * await bitski.signIn({ login_hint: LOGIN_HINT_SIGNUP });\n     * ```\n     */\n    async signIn(options) {\n        return this.getSDK().then((sdk) => sdk.signIn(options));\n    }\n    /**\n     * Gets the current signed in user. Will reject if we are not signed in.\n     */\n    async getUser() {\n        return this.getSDK().then((sdk) => sdk.getUser());\n    }\n    /**\n     * Connects to bitski to get a valid access token if possible.\n     */\n    async connect() {\n        return this.getSDK().then((sdk) => sdk.connect());\n    }\n    /**\n     * Starts redirect sign in flow. This is an alternative flow to the popup that all takes place in the same browser window.\n     * @param options Optionally provide additional options for the sign in request. See signIn() for more info.\n     */\n    signInRedirect(options) {\n        this.getSDK().then((sdk) => sdk.signInRedirect(options));\n    }\n    /**\n     * Call from your oauth redirect page.\n     */\n    async redirectCallback() {\n        return this.getSDK().then((sdk) => sdk.redirectCallback());\n    }\n    /**\n     * Retrieves the current access token for the user, if logged in.\n     */\n    async getCurrentAccessToken() {\n        return this.getSDK().then((sdk) => sdk.getCurrentAccessToken());\n    }\n    /**\n     * Retrieves the current ID token for the user, if logged in.\n     */\n    getCurrentIdToken() {\n        return this.getSDK().then((sdk) => sdk.getCurrentIdToken());\n    }\n    /**\n     * Retrieves the current refresh token for the user, if logged in.\n     * Requires that the user has approved your application for offline access.\n     */\n    getCurrentRefreshToken() {\n        return this.getSDK().then((sdk) => sdk.getCurrentRefreshToken());\n    }\n    /**\n     * Register a callback to be called on sign out. This is a good practice,\n     * since there may be situations where you are signed out unexpectedly.\n     * @param fn Your callback function\n     */\n    addSignOutHandler(fn) {\n        return this.getSDK().then((sdk) => sdk.addSignOutHandler(fn));\n    }\n    /**\n     * Remove a registered signout callback\n     * @param fn Your callback function\n     */\n    removeSignOutHandler(fn) {\n        return this.getSDK().then((sdk) => sdk.removeSignOutHandler(fn));\n    }\n    /**\n     * Sign the current user out of your application.\n     */\n    signOut() {\n        return this.getSDK().then((sdk) => sdk.signOut());\n    }\n    async getSDK() {\n        const sdk = await this.sdk;\n        if (!sdk) {\n            throw new Error('Bitski SDK not available');\n        }\n        return sdk;\n    }\n}\n// Note: duplicated so we don't include the whole module\nexport const LOGIN_HINT_SIGNUP = 'signup';\nfunction networkFromName(networkName) {\n    switch (networkName) {\n        case '':\n        case 'mainnet':\n            return Mainnet;\n        case 'goerli':\n            return Goerli;\n        case 'polygon':\n            return Polygon;\n        case 'mumbai':\n            return Mumbai;\n        case 'bnb':\n            return BinanceSmartChain;\n        case 'bnbt':\n            return BinanceSmartChainTestnet;\n        default:\n            throw new Error(`Unsupported network name ${networkName}. Try passing a \\`network\\` in the options instead.`);\n    }\n}\nfunction networkFromProviderOptions(options) {\n    if (typeof options === 'string') {\n        return networkFromName(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.network) {\n        return options.network;\n    }\n    if (options === null || options === void 0 ? void 0 : options.networkName) {\n        return networkFromName(options.networkName);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}