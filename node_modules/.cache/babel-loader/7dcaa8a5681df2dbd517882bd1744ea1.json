{"ast":null,"code":"export var ParseErrorCode;\n(function (ParseErrorCode) {\n  // Could not parse response as JSON\n  ParseErrorCode[ParseErrorCode[\"InvalidJSON\"] = 2000] = \"InvalidJSON\";\n  // Received an error response status,\n  // but not error body was provided.\n  ParseErrorCode[ParseErrorCode[\"NoErrorBody\"] = 2001] = \"NoErrorBody\";\n})(ParseErrorCode || (ParseErrorCode = {}));\n/**\n * Represents an error that is thrown during decoding\n */\nexport class ParseError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.name = 'ParseError';\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ParseError);\n    }\n    this.code = code;\n  }\n  static InvalidJSON() {\n    return new ParseError('Could not decode response as JSON', ParseErrorCode.InvalidJSON);\n  }\n  static UnknownError() {\n    return new ParseError('An unknown error occurred.', ParseErrorCode.NoErrorBody);\n  }\n}","map":{"version":3,"names":["ParseErrorCode","ParseError","Error","constructor","message","code","name","captureStackTrace","InvalidJSON","UnknownError","NoErrorBody"],"sources":["/Users/charvai/Desktop/template/node_modules/bitski/dist/esm/-private/errors/parse-error.js"],"sourcesContent":["export var ParseErrorCode;\n(function (ParseErrorCode) {\n    // Could not parse response as JSON\n    ParseErrorCode[ParseErrorCode[\"InvalidJSON\"] = 2000] = \"InvalidJSON\";\n    // Received an error response status,\n    // but not error body was provided.\n    ParseErrorCode[ParseErrorCode[\"NoErrorBody\"] = 2001] = \"NoErrorBody\";\n})(ParseErrorCode || (ParseErrorCode = {}));\n/**\n * Represents an error that is thrown during decoding\n */\nexport class ParseError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.name = 'ParseError';\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ParseError);\n        }\n        this.code = code;\n    }\n    static InvalidJSON() {\n        return new ParseError('Could not decode response as JSON', ParseErrorCode.InvalidJSON);\n    }\n    static UnknownError() {\n        return new ParseError('An unknown error occurred.', ParseErrorCode.NoErrorBody);\n    }\n}\n"],"mappings":"AAAA,OAAO,IAAIA,cAAc;AACzB,CAAC,UAAUA,cAAc,EAAE;EACvB;EACAA,cAAc,CAACA,cAAc,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,GAAG,aAAa;EACpE;EACA;EACAA,cAAc,CAACA,cAAc,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,GAAG,aAAa;AACxE,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASC,KAAK,CAAC;EAClCC,WAAW,CAACC,OAAO,EAAEC,IAAI,EAAE;IACvB,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,YAAY;IACxB;IACA,IAAIJ,KAAK,CAACK,iBAAiB,EAAE;MACzBL,KAAK,CAACK,iBAAiB,CAAC,IAAI,EAAEN,UAAU,CAAC;IAC7C;IACA,IAAI,CAACI,IAAI,GAAGA,IAAI;EACpB;EACA,OAAOG,WAAW,GAAG;IACjB,OAAO,IAAIP,UAAU,CAAC,mCAAmC,EAAED,cAAc,CAACQ,WAAW,CAAC;EAC1F;EACA,OAAOC,YAAY,GAAG;IAClB,OAAO,IAAIR,UAAU,CAAC,4BAA4B,EAAED,cAAc,CAACU,WAAW,CAAC;EACnF;AACJ"},"metadata":{},"sourceType":"module"}