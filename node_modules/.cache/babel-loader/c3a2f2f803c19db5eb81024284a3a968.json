{"ast":null,"code":"import { Subprovider } from '@bitski/provider-engine';\n/**\n * A subprovider that tracks and automatically increments the nonce on the client.\n * Heavily based on the provider-engine NonceTrackerSubprovider, but modified for\n * Bitski's transaction flow.\n */\nexport class NonceTrackerSubprovider extends Subprovider {\n  constructor() {\n    super();\n    this.nonceCache = new Map();\n  }\n  handleRequest(payload, next, end) {\n    switch (payload.method) {\n      case 'eth_getTransactionCount':\n        this.handleTransactionCountRequest(payload, next, end);\n        return;\n      case 'eth_sendTransaction':\n        this.handleSendTransactionRequest(payload, next);\n        return;\n      default:\n        next();\n        return;\n    }\n  }\n  // Return cached result if present\n  handleTransactionCountRequest(payload, next, end) {\n    const blockTag = payload.params.length > 1 ? payload.params[1] : null;\n    // Only handle pending tag\n    if (blockTag !== 'pending') {\n      next();\n      return;\n    }\n    const address = payload.params[0].toLowerCase();\n    const cachedResult = this.nonceCache.get(address);\n    // Return cached result it we have it\n    if (cachedResult) {\n      end(null, cachedResult);\n      return;\n    }\n    // Fallthrough and populate cache\n    next((err, result, cb) => {\n      if (!err) {\n        this.nonceCache.set(address, result);\n      }\n      cb();\n    });\n  }\n  toHex(num) {\n    const base16 = num.toString(16);\n    let hex = base16;\n    if (base16.length % 2 !== 0) {\n      hex = '0' + base16;\n    }\n    return '0x' + hex;\n  }\n  fromHex(str) {\n    return parseInt(str, 16);\n  }\n  nextNonce(nonce) {\n    const submittedNonce = this.fromHex(nonce);\n    const nextNonce = submittedNonce + 1;\n    return this.toHex(nextNonce);\n  }\n  // Increment next nonce for address\n  handleSendTransactionRequest(payload, next) {\n    // Submit the request, then monitor the result\n    next((err, result, cb) => {\n      const transaction = payload.params.length > 0 ? payload.params[0] : {};\n      const submittedNonce = transaction.nonce;\n      const address = transaction.from;\n      if (!err) {\n        if (submittedNonce && address) {\n          // Increment nonce\n          const nextNonce = this.nextNonce(submittedNonce);\n          this.nonceCache.set(address, nextNonce);\n        }\n      } else {\n        // Remove cached value if we encounter an error\n        this.nonceCache.delete(address);\n      }\n      cb();\n    });\n  }\n}","map":{"version":3,"names":["Subprovider","NonceTrackerSubprovider","constructor","nonceCache","Map","handleRequest","payload","next","end","method","handleTransactionCountRequest","handleSendTransactionRequest","blockTag","params","length","address","toLowerCase","cachedResult","get","err","result","cb","set","toHex","num","base16","toString","hex","fromHex","str","parseInt","nextNonce","nonce","submittedNonce","transaction","from","delete"],"sources":["/Users/charvai/Desktop/template/node_modules/bitski-provider/dist/subproviders/nonce-tracker.js"],"sourcesContent":["import { Subprovider } from '@bitski/provider-engine';\n/**\n * A subprovider that tracks and automatically increments the nonce on the client.\n * Heavily based on the provider-engine NonceTrackerSubprovider, but modified for\n * Bitski's transaction flow.\n */\nexport class NonceTrackerSubprovider extends Subprovider {\n    constructor() {\n        super();\n        this.nonceCache = new Map();\n    }\n    handleRequest(payload, next, end) {\n        switch (payload.method) {\n            case 'eth_getTransactionCount':\n                this.handleTransactionCountRequest(payload, next, end);\n                return;\n            case 'eth_sendTransaction':\n                this.handleSendTransactionRequest(payload, next);\n                return;\n            default:\n                next();\n                return;\n        }\n    }\n    // Return cached result if present\n    handleTransactionCountRequest(payload, next, end) {\n        const blockTag = payload.params.length > 1 ? payload.params[1] : null;\n        // Only handle pending tag\n        if (blockTag !== 'pending') {\n            next();\n            return;\n        }\n        const address = payload.params[0].toLowerCase();\n        const cachedResult = this.nonceCache.get(address);\n        // Return cached result it we have it\n        if (cachedResult) {\n            end(null, cachedResult);\n            return;\n        }\n        // Fallthrough and populate cache\n        next((err, result, cb) => {\n            if (!err) {\n                this.nonceCache.set(address, result);\n            }\n            cb();\n        });\n    }\n    toHex(num) {\n        const base16 = num.toString(16);\n        let hex = base16;\n        if (base16.length % 2 !== 0) {\n            hex = '0' + base16;\n        }\n        return '0x' + hex;\n    }\n    fromHex(str) {\n        return parseInt(str, 16);\n    }\n    nextNonce(nonce) {\n        const submittedNonce = this.fromHex(nonce);\n        const nextNonce = submittedNonce + 1;\n        return this.toHex(nextNonce);\n    }\n    // Increment next nonce for address\n    handleSendTransactionRequest(payload, next) {\n        // Submit the request, then monitor the result\n        next((err, result, cb) => {\n            const transaction = payload.params.length > 0 ? payload.params[0] : {};\n            const submittedNonce = transaction.nonce;\n            const address = transaction.from;\n            if (!err) {\n                if (submittedNonce && address) {\n                    // Increment nonce\n                    const nextNonce = this.nextNonce(submittedNonce);\n                    this.nonceCache.set(address, nextNonce);\n                }\n            }\n            else {\n                // Remove cached value if we encounter an error\n                this.nonceCache.delete(address);\n            }\n            cb();\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}