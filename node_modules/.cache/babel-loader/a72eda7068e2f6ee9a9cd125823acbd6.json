{"ast":null,"code":"/*\n * Calculate gasPrice based on last blocks.\n * @author github.com/axic\n *\n * FIXME: support minimum suggested gas and perhaps other options from geth:\n * https://github.com/ethereum/go-ethereum/blob/master/eth/gasprice.go\n * https://github.com/ethereum/go-ethereum/wiki/Gas-Price-Oracle\n */\nimport map from 'async/map';\nimport { GasPriceError } from '../errors/gas-price-error';\nimport Subprovider from '../subprovider';\nexport default class GaspriceProvider extends Subprovider {\n  constructor(opts) {\n    opts = opts || {};\n    super();\n    this.numberOfBlocks = opts.numberOfBlocks || 10;\n    this.delayInBlocks = opts.delayInBlocks || 5;\n  }\n  handleRequest(payload, next, end) {\n    if (payload.method !== 'eth_gasPrice') {\n      return next();\n    }\n    const p = {\n      id: 0,\n      jsonrpc: '2.0',\n      method: 'eth_blockNumber',\n      params: []\n    };\n    this.emitPayload(p, (_, res) => {\n      // FIXME: convert number using a bignum library\n      let lastBlock = parseInt(res.result, 16) - this.delayInBlocks;\n      const blockNumbers = [];\n      for (let i = 0; i < this.numberOfBlocks; i++) {\n        blockNumbers.push('0x' + lastBlock.toString(16));\n        lastBlock--;\n      }\n      const getBlock = (item, cb) => {\n        const p2 = {\n          id: 0,\n          jsonrpc: '2.0',\n          method: 'eth_getBlockByNumber',\n          params: [item, true]\n        };\n        this.emitPayload(p2, (err, blockRes) => {\n          if (err) {\n            return cb(err);\n          }\n          if (!blockRes.result) {\n            return cb(GasPriceError.BlockNotFound(item));\n          }\n          cb(null, blockRes.result.transactions);\n        });\n      };\n      // FIXME: this could be made much faster\n      const calcPrice = (err, transactions) => {\n        // flatten array\n        transactions = transactions.reduce((a, b) => a.concat(b), []);\n        // leave only the gasprice\n        // FIXME: convert number using a bignum library\n        transactions = transactions.map(a => parseInt(a.gasPrice, 16), []);\n        // order ascending\n        transactions.sort((a, b) => a - b);\n        // ze median\n        const half = Math.floor(transactions.length / 2);\n        let median;\n        if (transactions.length % 2) {\n          median = transactions[half];\n        } else {\n          median = Math.floor((transactions[half - 1] + transactions[half]) / 2.0);\n        }\n        end(null, median);\n      };\n      map(blockNumbers, getBlock, calcPrice);\n    });\n  }\n}","map":{"version":3,"names":["map","GasPriceError","Subprovider","GaspriceProvider","constructor","opts","numberOfBlocks","delayInBlocks","handleRequest","payload","next","end","method","p","id","jsonrpc","params","emitPayload","_","res","lastBlock","parseInt","result","blockNumbers","i","push","toString","getBlock","item","cb","p2","err","blockRes","BlockNotFound","transactions","calcPrice","reduce","a","b","concat","gasPrice","sort","half","Math","floor","length","median"],"sources":["/Users/charvai/Desktop/template/node_modules/@bitski/provider-engine/dist/modules/subproviders/gasprice.js"],"sourcesContent":["/*\n * Calculate gasPrice based on last blocks.\n * @author github.com/axic\n *\n * FIXME: support minimum suggested gas and perhaps other options from geth:\n * https://github.com/ethereum/go-ethereum/blob/master/eth/gasprice.go\n * https://github.com/ethereum/go-ethereum/wiki/Gas-Price-Oracle\n */\nimport map from 'async/map';\nimport { GasPriceError } from '../errors/gas-price-error';\nimport Subprovider from '../subprovider';\nexport default class GaspriceProvider extends Subprovider {\n    constructor(opts) {\n        opts = opts || {};\n        super();\n        this.numberOfBlocks = opts.numberOfBlocks || 10;\n        this.delayInBlocks = opts.delayInBlocks || 5;\n    }\n    handleRequest(payload, next, end) {\n        if (payload.method !== 'eth_gasPrice') {\n            return next();\n        }\n        const p = { id: 0, jsonrpc: '2.0', method: 'eth_blockNumber', params: [] };\n        this.emitPayload(p, (_, res) => {\n            // FIXME: convert number using a bignum library\n            let lastBlock = parseInt(res.result, 16) - this.delayInBlocks;\n            const blockNumbers = [];\n            for (let i = 0; i < this.numberOfBlocks; i++) {\n                blockNumbers.push('0x' + lastBlock.toString(16));\n                lastBlock--;\n            }\n            const getBlock = (item, cb) => {\n                const p2 = { id: 0, jsonrpc: '2.0', method: 'eth_getBlockByNumber', params: [item, true] };\n                this.emitPayload(p2, (err, blockRes) => {\n                    if (err) {\n                        return cb(err);\n                    }\n                    if (!blockRes.result) {\n                        return cb(GasPriceError.BlockNotFound(item));\n                    }\n                    cb(null, blockRes.result.transactions);\n                });\n            };\n            // FIXME: this could be made much faster\n            const calcPrice = (err, transactions) => {\n                // flatten array\n                transactions = transactions.reduce((a, b) => a.concat(b), []);\n                // leave only the gasprice\n                // FIXME: convert number using a bignum library\n                transactions = transactions.map((a) => parseInt(a.gasPrice, 16), []);\n                // order ascending\n                transactions.sort((a, b) => a - b);\n                // ze median\n                const half = Math.floor(transactions.length / 2);\n                let median;\n                if (transactions.length % 2) {\n                    median = transactions[half];\n                }\n                else {\n                    median = Math.floor((transactions[half - 1] + transactions[half]) / 2.0);\n                }\n                end(null, median);\n            };\n            map(blockNumbers, getBlock, calcPrice);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}