{"ast":null,"code":"import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\nconst randomId = () => randombytes(32).toString(\"hex\");\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = keccakLib;\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"sources":["../src/randomId.ts","../src/url.ts","../src/utils.ts"],"names":["randomId","randombytes","toString","URLWithHashParams","URL","URLSearchParams","hash","hashParams","call","base64url","base64urlLib","safebtoa","str","encode","safeatob","decode","keccak","keccakLib","base64toJSON","b64str","JSON","parse","jsonToBase64","json","stringify","keccak256","input","slice","length","Buffer","from","data","update","digest","padStart"],"mappings":";;;;AAEaA,MAAAA,QAAQ,GAAG,MAAcC,WAAW,CAAC,EAAD,CAAXA,CAAgBC,QAAhBD,CAAyB,KAAzBA,CAAAA;ACAhC,MAAOE,iBAAP,SAAiCC,GAAjC,CAAoC;EAAA,WAAA,GAAA;IAAA,KAAA,CAAA,GAAA,SAAA,CAAA;IAAA,eACf,CAAA,IAAA,EAAA,YAAA,EAAA,IAAIC,eAAJ,EADe,CAAA;EAAA;EAGxCH,QAAQ,GAAA;IACN,IAAA,CAAKI,IAAL,GAAY,IAAA,CAAKC,UAAL,CAAgBL,QAAhB,EAAZ;IACA,OAAO,KAAA,CAAMA,QAAN,CAAeM,IAAf,CAAoB,IAApB,CAAP;EACD;AANuC;ACCnC,MAAMC,SAAS,GAAGC,YAAlB;AAED,SAAUC,QAAV,CAAmBC,GAAnB,EAA8B;EAClC,OAAOH,SAAS,CAACI,MAAVJ,CAAiBG,GAAjBH,CAAP;AACD;AAEK,SAAUK,QAAV,CAAmBF,GAAnB,EAA8B;EAClC;EACA,OAAOH,SAAS,CAACM,MAAVN,CAAiBG,GAAjBH,CAAP;AACD;AAEM,MAAMO,MAAM,GAAGC,SAAf;AAID,SAAUC,YAAV,CAAuBC,MAAvB,EAAqC;EACzC,OAAOC,IAAI,CAACC,KAALD,CAAWX,SAAS,CAACM,MAAVN,CAAiBU,MAAjBV,CAAXW,CAAP;AACD;AAEK,SAAUE,YAAV,CAAuBC,IAAvB,EAAoD;EACxD,OAAOd,SAAS,CAACI,MAAVJ,CAAiBW,IAAI,CAACI,SAALJ,CAAeG,IAAfH,CAAjBX,CAAP;AACD;AAEK,SAAUgB,SAAV,CAAoBb,GAApB,EAA+B;EACnC,IAAIc,KAAK,GAAoBd,GAA7B;EACA,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACe,KAAJf,CAAU,CAAVA,EAAa,CAAbA,CAAAA,KAAoB,IAA/C,IAAuDA,GAAG,CAACgB,MAAJhB,KAAe,EAA1E,EAA8E;IAC5Ec,KAAK,GAAGG,MAAM,CAACC,IAAPD,CAAYjB,GAAG,CAACe,KAAJf,CAAU,CAAVA,CAAZiB,EAA0B,KAA1BA,CAARH;EACD;EACD,MAAMK,IAAI,GAAA,IAAA,CAAA,MAAA,CAAQf,MAAM,CAAC,WAAD,CAANA,CAAoBgB,MAApBhB,CAA2BU,KAA3BV,CAAAA,CAAkCiB,MAAlCjB,CAAyC,KAAzCA,CAAgDkB,CAAAA,QAAhDlB,CAAyD,EAAzDA,EAA6D,GAA7DA,CAAR,CAAV;EACA,OAAOe,IAAP;AACD","sourcesContent":["import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\n\nconst randomId = () => randombytes(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = keccakLib;\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };\n//# sourceMappingURL=openloginUtils.esm.js.map\n"]},"metadata":{},"sourceType":"module"}