{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport { IJsonRpcConnection } from \"@walletconnect/jsonrpc-types\";\nimport { formatJsonRpcError } from \"@walletconnect/jsonrpc-utils\";\nexport class SignerConnection extends IJsonRpcConnection {\n  constructor(opts) {\n    super();\n    this.events = new EventEmitter();\n    this.accounts = [];\n    this.chainId = 1;\n    this.pending = false;\n    this.bridge = \"https://bridge.walletconnect.org\";\n    this.qrcode = true;\n    this.qrcodeModalOptions = undefined;\n    this.opts = opts;\n    this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;\n    this.wc = this.register(opts);\n  }\n  get connected() {\n    return typeof this.wc !== \"undefined\" && this.wc.connected;\n  }\n  get connecting() {\n    return this.pending;\n  }\n  get connector() {\n    this.wc = this.register(this.opts);\n    return this.wc;\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  async open(chainId) {\n    if (this.connected) {\n      this.onOpen();\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      this.on(\"error\", err => {\n        reject(err);\n      });\n      this.on(\"open\", () => {\n        resolve();\n      });\n      this.create(chainId);\n    });\n  }\n  async close() {\n    if (typeof this.wc === \"undefined\") return;\n    if (this.wc.connected) {\n      this.wc.killSession();\n    }\n    this.onClose();\n  }\n  async send(payload) {\n    this.wc = this.register(this.opts);\n    if (!this.connected) await this.open();\n    this.sendPayload(payload).then(res => this.events.emit(\"payload\", res)).catch(e => this.events.emit(\"payload\", formatJsonRpcError(payload.id, e.message)));\n  }\n  register(opts) {\n    if (this.wc) return this.wc;\n    this.opts = opts || this.opts;\n    this.bridge = (opts === null || opts === void 0 ? void 0 : opts.connector) ? opts.connector.bridge : (opts === null || opts === void 0 ? void 0 : opts.bridge) || \"https://bridge.walletconnect.org\";\n    this.qrcode = typeof (opts === null || opts === void 0 ? void 0 : opts.qrcode) === \"undefined\" || opts.qrcode !== false;\n    this.chainId = typeof (opts === null || opts === void 0 ? void 0 : opts.chainId) !== \"undefined\" ? opts.chainId : this.chainId;\n    this.qrcodeModalOptions = opts === null || opts === void 0 ? void 0 : opts.qrcodeModalOptions;\n    const connectorOpts = {\n      bridge: this.bridge,\n      qrcodeModal: this.qrcode ? QRCodeModal : undefined,\n      qrcodeModalOptions: this.qrcodeModalOptions,\n      storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,\n      signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,\n      clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta\n    };\n    this.wc = typeof (opts === null || opts === void 0 ? void 0 : opts.connector) !== \"undefined\" ? opts.connector : new WalletConnect(connectorOpts);\n    if (typeof this.wc === \"undefined\") {\n      throw new Error(\"Failed to register WalletConnect connector\");\n    }\n    if (this.wc.accounts.length) {\n      this.accounts = this.wc.accounts;\n    }\n    if (this.wc.chainId) {\n      this.chainId = this.wc.chainId;\n    }\n    this.registerConnectorEvents();\n    return this.wc;\n  }\n  onOpen(wc) {\n    this.pending = false;\n    if (wc) {\n      this.wc = wc;\n    }\n    this.events.emit(\"open\");\n  }\n  onClose() {\n    this.pending = false;\n    if (this.wc) {\n      this.wc = undefined;\n    }\n    this.events.emit(\"close\");\n  }\n  onError(payload) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Failed or Rejected Request\";\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -32000;\n    let data = arguments.length > 3 ? arguments[3] : undefined;\n    const errorPayload = {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        code,\n        message\n      }\n    };\n    if (typeof data !== \"undefined\") {\n      errorPayload.error.data = data;\n    }\n    this.events.emit(\"payload\", errorPayload);\n    return errorPayload;\n  }\n  create(chainId) {\n    this.wc = this.register(this.opts);\n    this.chainId = chainId || this.chainId;\n    if (this.connected || this.pending) return;\n    this.pending = true;\n    this.registerConnectorEvents();\n    this.wc.createSession({\n      chainId: this.chainId\n    }).then(() => this.events.emit(\"created\")).catch(e => this.events.emit(\"error\", e));\n  }\n  registerConnectorEvents() {\n    this.wc = this.register(this.opts);\n    this.wc.on(\"connect\", err => {\n      var _a, _b;\n      if (err) {\n        this.events.emit(\"error\", err);\n        return;\n      }\n      this.accounts = ((_a = this.wc) === null || _a === void 0 ? void 0 : _a.accounts) || [];\n      this.chainId = ((_b = this.wc) === null || _b === void 0 ? void 0 : _b.chainId) || this.chainId;\n      this.onOpen();\n    });\n    this.wc.on(\"disconnect\", err => {\n      if (err) {\n        this.events.emit(\"error\", err);\n        return;\n      }\n      this.onClose();\n    });\n    this.wc.on(\"modal_closed\", () => {\n      this.events.emit(\"error\", new Error(\"User closed modal\"));\n    });\n    this.wc.on(\"session_update\", (error, payload) => {\n      const {\n        accounts,\n        chainId\n      } = payload.params[0];\n      if (!this.accounts || accounts && this.accounts !== accounts) {\n        this.accounts = accounts;\n        this.events.emit(\"accountsChanged\", accounts);\n      }\n      if (!this.chainId || chainId && this.chainId !== chainId) {\n        this.chainId = chainId;\n        this.events.emit(\"chainChanged\", chainId);\n      }\n    });\n  }\n  async sendPayload(payload) {\n    this.wc = this.register(this.opts);\n    try {\n      const response = await this.wc.unsafeSend(payload);\n      return this.sanitizeResponse(response);\n    } catch (error) {\n      return this.onError(payload, error.message);\n    }\n  }\n  sanitizeResponse(response) {\n    return typeof response.error !== \"undefined\" && typeof response.error.code === \"undefined\" ? formatJsonRpcError(response.id, response.error.message, response.error.data) : response;\n  }\n}\nexport default SignerConnection;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport { IJsonRpcConnection } from \"@walletconnect/jsonrpc-types\";\nimport { formatJsonRpcError } from \"@walletconnect/jsonrpc-utils\";\nexport class SignerConnection extends IJsonRpcConnection {\n    constructor(opts) {\n        super();\n        this.events = new EventEmitter();\n        this.accounts = [];\n        this.chainId = 1;\n        this.pending = false;\n        this.bridge = \"https://bridge.walletconnect.org\";\n        this.qrcode = true;\n        this.qrcodeModalOptions = undefined;\n        this.opts = opts;\n        this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;\n        this.wc = this.register(opts);\n    }\n    get connected() {\n        return typeof this.wc !== \"undefined\" && this.wc.connected;\n    }\n    get connecting() {\n        return this.pending;\n    }\n    get connector() {\n        this.wc = this.register(this.opts);\n        return this.wc;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async open(chainId) {\n        if (this.connected) {\n            this.onOpen();\n            return;\n        }\n        return new Promise((resolve, reject) => {\n            this.on(\"error\", err => {\n                reject(err);\n            });\n            this.on(\"open\", () => {\n                resolve();\n            });\n            this.create(chainId);\n        });\n    }\n    async close() {\n        if (typeof this.wc === \"undefined\")\n            return;\n        if (this.wc.connected) {\n            this.wc.killSession();\n        }\n        this.onClose();\n    }\n    async send(payload) {\n        this.wc = this.register(this.opts);\n        if (!this.connected)\n            await this.open();\n        this.sendPayload(payload)\n            .then((res) => this.events.emit(\"payload\", res))\n            .catch(e => this.events.emit(\"payload\", formatJsonRpcError(payload.id, e.message)));\n    }\n    register(opts) {\n        if (this.wc)\n            return this.wc;\n        this.opts = opts || this.opts;\n        this.bridge = (opts === null || opts === void 0 ? void 0 : opts.connector)\n            ? opts.connector.bridge\n            : (opts === null || opts === void 0 ? void 0 : opts.bridge) || \"https://bridge.walletconnect.org\";\n        this.qrcode = typeof (opts === null || opts === void 0 ? void 0 : opts.qrcode) === \"undefined\" || opts.qrcode !== false;\n        this.chainId = typeof (opts === null || opts === void 0 ? void 0 : opts.chainId) !== \"undefined\" ? opts.chainId : this.chainId;\n        this.qrcodeModalOptions = opts === null || opts === void 0 ? void 0 : opts.qrcodeModalOptions;\n        const connectorOpts = {\n            bridge: this.bridge,\n            qrcodeModal: this.qrcode ? QRCodeModal : undefined,\n            qrcodeModalOptions: this.qrcodeModalOptions,\n            storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,\n            signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,\n            clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta,\n        };\n        this.wc =\n            typeof (opts === null || opts === void 0 ? void 0 : opts.connector) !== \"undefined\" ? opts.connector : new WalletConnect(connectorOpts);\n        if (typeof this.wc === \"undefined\") {\n            throw new Error(\"Failed to register WalletConnect connector\");\n        }\n        if (this.wc.accounts.length) {\n            this.accounts = this.wc.accounts;\n        }\n        if (this.wc.chainId) {\n            this.chainId = this.wc.chainId;\n        }\n        this.registerConnectorEvents();\n        return this.wc;\n    }\n    onOpen(wc) {\n        this.pending = false;\n        if (wc) {\n            this.wc = wc;\n        }\n        this.events.emit(\"open\");\n    }\n    onClose() {\n        this.pending = false;\n        if (this.wc) {\n            this.wc = undefined;\n        }\n        this.events.emit(\"close\");\n    }\n    onError(payload, message = \"Failed or Rejected Request\", code = -32000, data) {\n        const errorPayload = {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            error: { code, message },\n        };\n        if (typeof data !== \"undefined\") {\n            errorPayload.error.data = data;\n        }\n        this.events.emit(\"payload\", errorPayload);\n        return errorPayload;\n    }\n    create(chainId) {\n        this.wc = this.register(this.opts);\n        this.chainId = chainId || this.chainId;\n        if (this.connected || this.pending)\n            return;\n        this.pending = true;\n        this.registerConnectorEvents();\n        this.wc\n            .createSession({ chainId: this.chainId })\n            .then(() => this.events.emit(\"created\"))\n            .catch((e) => this.events.emit(\"error\", e));\n    }\n    registerConnectorEvents() {\n        this.wc = this.register(this.opts);\n        this.wc.on(\"connect\", (err) => {\n            var _a, _b;\n            if (err) {\n                this.events.emit(\"error\", err);\n                return;\n            }\n            this.accounts = ((_a = this.wc) === null || _a === void 0 ? void 0 : _a.accounts) || [];\n            this.chainId = ((_b = this.wc) === null || _b === void 0 ? void 0 : _b.chainId) || this.chainId;\n            this.onOpen();\n        });\n        this.wc.on(\"disconnect\", (err) => {\n            if (err) {\n                this.events.emit(\"error\", err);\n                return;\n            }\n            this.onClose();\n        });\n        this.wc.on(\"modal_closed\", () => {\n            this.events.emit(\"error\", new Error(\"User closed modal\"));\n        });\n        this.wc.on(\"session_update\", (error, payload) => {\n            const { accounts, chainId } = payload.params[0];\n            if (!this.accounts || (accounts && this.accounts !== accounts)) {\n                this.accounts = accounts;\n                this.events.emit(\"accountsChanged\", accounts);\n            }\n            if (!this.chainId || (chainId && this.chainId !== chainId)) {\n                this.chainId = chainId;\n                this.events.emit(\"chainChanged\", chainId);\n            }\n        });\n    }\n    async sendPayload(payload) {\n        this.wc = this.register(this.opts);\n        try {\n            const response = await this.wc.unsafeSend(payload);\n            return this.sanitizeResponse(response);\n        }\n        catch (error) {\n            return this.onError(payload, error.message);\n        }\n    }\n    sanitizeResponse(response) {\n        return typeof response.error !== \"undefined\" &&\n            typeof response.error.code === \"undefined\"\n            ? formatJsonRpcError(response.id, response.error.message, response.error.data)\n            : response;\n    }\n}\nexport default SignerConnection;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}