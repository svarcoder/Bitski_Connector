{"ast":null,"code":"\"use strict\";\n\nimport { ethers } from \"ethers\";\nimport scrypt from \"scrypt-js\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\nlet warned = false;\nexport class BrainWallet extends ethers.Wallet {\n  static _generate(username, password, legacy, progressCallback) {\n    if (!warned) {\n      logger.warn(\"Warning: using Brain Wallets should be considered insecure (this warning will not be repeated)\");\n      warned = true;\n    }\n    let usernameBytes = null;\n    let passwordBytes = null;\n    if (typeof username === 'string') {\n      logger.checkNormalize();\n      usernameBytes = ethers.utils.toUtf8Bytes(username.normalize('NFKC'));\n    } else {\n      usernameBytes = ethers.utils.arrayify(username);\n    }\n    if (typeof password === 'string') {\n      logger.checkNormalize();\n      passwordBytes = ethers.utils.toUtf8Bytes(password.normalize('NFKC'));\n    } else {\n      passwordBytes = ethers.utils.arrayify(password);\n    }\n    return scrypt.scrypt(passwordBytes, usernameBytes, 1 << 18, 8, 1, 32, progressCallback).then(key => {\n      if (legacy) {\n        return new BrainWallet(key);\n      }\n      const mnemonic = ethers.utils.entropyToMnemonic(ethers.utils.arrayify(key).slice(0, 16));\n      return new BrainWallet(ethers.Wallet.fromMnemonic(mnemonic));\n    });\n  }\n  static generate(username, password, progressCallback) {\n    return BrainWallet._generate(username, password, false, progressCallback);\n  }\n  static generateLegacy(username, password, progressCallback) {\n    return BrainWallet._generate(username, password, true, progressCallback);\n  }\n}","map":{"version":3,"sources":["../src.ts/brain-wallet.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,MAAM,QAAQ,QAAQ;AAE/B,OAAO,MAAM,MAAM,WAAW;AAE9B,SAAS,OAAO,QAAQ,YAAY;AAEpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;AAE/C,IAAI,MAAM,GAAG,KAAK;AAElB,OAAM,MAAO,WAAY,SAAQ,MAAM,CAAC,MAAM,CAAA;EAE1C,OAAO,SAAS,CAAC,QAA+B,EAAE,QAA+B,EAAE,MAAe,EAAE,gBAAgD,EAAA;IAChJ,IAAI,CAAC,MAAM,EAAE;MACT,MAAM,CAAC,IAAI,CAAC,gGAAgG,CAAC;MAC7G,MAAM,GAAG,IAAI;IAChB;IACD,IAAI,aAAa,GAAe,IAAI;IACpC,IAAI,aAAa,GAAe,IAAI;IAEpC,IAAI,OAAO,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAM,CAAC,cAAc,EAAE;MACvB,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACvE,MAAM;MACH,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAClD;IAED,IAAI,OAAO,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAM,CAAC,cAAc,EAAE;MACvB,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACvE,MAAM;MACH,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAClD;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,EAAG,CAAC,IAAI,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAE,GAAe,IAAI;MAC/G,IAAI,MAAM,EAAE;QACR,OAAO,IAAI,WAAW,CAAC,GAAG,CAAC;MAE9B;MACD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACxF,OAAO,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAChE,CAAC,CAAC;EACN;EAEA,OAAO,QAAQ,CAAC,QAA+B,EAAE,QAA+B,EAAE,gBAAgD,EAAA;IAC9H,OAAO,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,gBAAgB,CAAC;EAC7E;EAEA,OAAO,cAAc,CAAC,QAA+B,EAAE,QAA+B,EAAE,gBAAgD,EAAA;IACpI,OAAO,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,gBAAgB,CAAC;EAC5E;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { ethers } from \"ethers\";\nimport scrypt from \"scrypt-js\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\nlet warned = false;\nexport class BrainWallet extends ethers.Wallet {\n    static _generate(username, password, legacy, progressCallback) {\n        if (!warned) {\n            logger.warn(\"Warning: using Brain Wallets should be considered insecure (this warning will not be repeated)\");\n            warned = true;\n        }\n        let usernameBytes = null;\n        let passwordBytes = null;\n        if (typeof (username) === 'string') {\n            logger.checkNormalize();\n            usernameBytes = ethers.utils.toUtf8Bytes(username.normalize('NFKC'));\n        }\n        else {\n            usernameBytes = ethers.utils.arrayify(username);\n        }\n        if (typeof (password) === 'string') {\n            logger.checkNormalize();\n            passwordBytes = ethers.utils.toUtf8Bytes(password.normalize('NFKC'));\n        }\n        else {\n            passwordBytes = ethers.utils.arrayify(password);\n        }\n        return scrypt.scrypt(passwordBytes, usernameBytes, (1 << 18), 8, 1, 32, progressCallback).then((key) => {\n            if (legacy) {\n                return new BrainWallet(key);\n            }\n            const mnemonic = ethers.utils.entropyToMnemonic(ethers.utils.arrayify(key).slice(0, 16));\n            return new BrainWallet(ethers.Wallet.fromMnemonic(mnemonic));\n        });\n    }\n    static generate(username, password, progressCallback) {\n        return BrainWallet._generate(username, password, false, progressCallback);\n    }\n    static generateLegacy(username, password, progressCallback) {\n        return BrainWallet._generate(username, password, true, progressCallback);\n    }\n}\n//# sourceMappingURL=brain-wallet.js.map"]},"metadata":{},"sourceType":"module"}