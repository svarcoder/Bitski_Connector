{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}