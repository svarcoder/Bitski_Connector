{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProviderError = exports.ProviderErrorCode = void 0;\nvar ProviderErrorCode;\n(function (ProviderErrorCode) {\n  // Thrown when accessing subscription features when they are disabled.\n  ProviderErrorCode[ProviderErrorCode[\"SubscriptionsUnavailable\"] = 4000] = \"SubscriptionsUnavailable\";\n  // Thrown when request is missing required params or data\n  ProviderErrorCode[ProviderErrorCode[\"InvalidRequest\"] = 4001] = \"InvalidRequest\";\n  // Ethereum chain doesn't exist when attempting to switch\n  ProviderErrorCode[ProviderErrorCode[\"ChainDoesNotExist\"] = 4902] = \"ChainDoesNotExist\";\n})(ProviderErrorCode = exports.ProviderErrorCode || (exports.ProviderErrorCode = {}));\nclass ProviderError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.name = 'ProviderError';\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProviderError);\n    }\n    this.code = code;\n  }\n  static SubscriptionsUnavailable() {\n    return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);\n  }\n  static InvalidRequest(reason) {\n    return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);\n  }\n}\nexports.ProviderError = ProviderError;","map":{"version":3,"sources":["../../src/errors/provider-error.ts"],"names":[],"mappings":";;;;;;AAAA,IAAY,iBAOX;AAPD,CAAA,UAAY,iBAAiB,EAAA;EAC3B;EACA,iBAAA,CAAA,iBAAA,CAAA,0BAAA,CAAA,GAAA,IAAA,CAAA,GAAA,0BAA+B;EAC/B;EACA,iBAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,gBAAqB;EACrB;EACA,iBAAA,CAAA,iBAAA,CAAA,mBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,mBAAwB;AAC1B,CAAC,EAPW,iBAAiB,GAAjB,OAAA,CAAA,iBAAiB,KAAjB,OAAA,CAAA,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA;AAS7B,MAAa,aAAc,SAAQ,KAAK,CAAA;EAetC,WAAA,CAAY,OAAe,EAAE,IAAuB,EAAA;IAClD,KAAK,CAAC,OAAO,CAAC;IAJT,IAAA,CAAA,IAAI,GAAG,eAAe;IAK3B;IACA,IAAI,KAAK,CAAC,iBAAiB,EAAE;MAC3B,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC;IAC7C;IACD,IAAI,CAAC,IAAI,GAAG,IAAI;EAClB;EArBO,OAAO,wBAAwB,GAAA;IACpC,OAAO,IAAI,aAAa,CACtB,uEAAuE,EACvE,iBAAiB,CAAC,wBAAwB,CAC3C;EACH;EAEO,OAAO,cAAc,CAAC,MAAc,EAAA;IACzC,OAAO,IAAI,aAAa,CAAC,oBAAoB,MAAM,EAAE,EAAE,iBAAiB,CAAC,cAAc,CAAC;EAC1F;AAaD;AAvBD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProviderError = exports.ProviderErrorCode = void 0;\nvar ProviderErrorCode;\n(function (ProviderErrorCode) {\n    // Thrown when accessing subscription features when they are disabled.\n    ProviderErrorCode[ProviderErrorCode[\"SubscriptionsUnavailable\"] = 4000] = \"SubscriptionsUnavailable\";\n    // Thrown when request is missing required params or data\n    ProviderErrorCode[ProviderErrorCode[\"InvalidRequest\"] = 4001] = \"InvalidRequest\";\n    // Ethereum chain doesn't exist when attempting to switch\n    ProviderErrorCode[ProviderErrorCode[\"ChainDoesNotExist\"] = 4902] = \"ChainDoesNotExist\";\n})(ProviderErrorCode = exports.ProviderErrorCode || (exports.ProviderErrorCode = {}));\nclass ProviderError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.name = 'ProviderError';\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ProviderError);\n        }\n        this.code = code;\n    }\n    static SubscriptionsUnavailable() {\n        return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);\n    }\n    static InvalidRequest(reason) {\n        return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);\n    }\n}\nexports.ProviderError = ProviderError;\n//# sourceMappingURL=provider-error.js.map"]},"metadata":{},"sourceType":"script"}