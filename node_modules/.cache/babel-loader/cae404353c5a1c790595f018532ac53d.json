{"ast":null,"code":"import BN from 'bn.js';\nimport ethjsUtil from 'ethjs-util';\n// Methods from ethereumjs-util\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports\n * `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\nexport function toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (ethjsUtil.isHexString(v)) {\n        v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n      } else {\n        throw new TypeError(\n        // tslint:disable-next-line: max-line-length\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n      }\n    } else if (typeof v === 'number') {\n      v = ethjsUtil.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new TypeError(`invalid type: ${v}`);\n    }\n  }\n  return v;\n}\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport function addHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n}\nexport function stripHexPrefix(str) {\n  return ethjsUtil.stripHexPrefix(str);\n}\nexport function intToHex(n) {\n  return ethjsUtil.intToHex(n);\n}\nexport function intToBuffer(n) {\n  return ethjsUtil.intToBuffer(n);\n}\n/**\n * Converts a `Buffer` into a hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport function bufferToHex(buf) {\n  buf = toBuffer(buf);\n  return '0x' + buf.toString('hex');\n}\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport function bufferToInt(buf) {\n  return new BN(toBuffer(buf)).toNumber();\n}\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nexport function unpad(a) {\n  a = ethjsUtil.stripHexPrefix(a);\n  let first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n}","map":{"version":3,"names":["BN","ethjsUtil","toBuffer","v","Buffer","isBuffer","Array","isArray","from","isHexString","padToEven","stripHexPrefix","TypeError","intToBuffer","undefined","allocUnsafe","isBN","toArrayLike","toArray","addHexPrefix","str","isHexPrefixed","intToHex","n","bufferToHex","buf","toString","bufferToInt","toNumber","unpad","a","first","length","slice"],"sources":["/Users/charvai/Desktop/template/node_modules/@bitski/provider-engine/dist/modules/util/eth-util.js"],"sourcesContent":["import BN from 'bn.js';\nimport ethjsUtil from 'ethjs-util';\n// Methods from ethereumjs-util\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports\n * `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\nexport function toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (Array.isArray(v)) {\n            v = Buffer.from(v);\n        }\n        else if (typeof v === 'string') {\n            if (ethjsUtil.isHexString(v)) {\n                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n            }\n            else {\n                throw new TypeError(\n                // tslint:disable-next-line: max-line-length\n                `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n            }\n        }\n        else if (typeof v === 'number') {\n            v = ethjsUtil.intToBuffer(v);\n        }\n        else if (v === null || v === undefined) {\n            v = Buffer.allocUnsafe(0);\n        }\n        else if (BN.isBN(v)) {\n            v = v.toArrayLike(Buffer);\n        }\n        else if (v.toArray) {\n            // converts a BN to a Buffer\n            v = Buffer.from(v.toArray());\n        }\n        else {\n            throw new TypeError(`invalid type: ${v}`);\n        }\n    }\n    return v;\n}\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport function addHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n}\nexport function stripHexPrefix(str) {\n    return ethjsUtil.stripHexPrefix(str);\n}\nexport function intToHex(n) {\n    return ethjsUtil.intToHex(n);\n}\nexport function intToBuffer(n) {\n    return ethjsUtil.intToBuffer(n);\n}\n/**\n * Converts a `Buffer` into a hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport function bufferToHex(buf) {\n    buf = toBuffer(buf);\n    return '0x' + buf.toString('hex');\n}\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport function bufferToInt(buf) {\n    return new BN(toBuffer(buf)).toNumber();\n}\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nexport function unpad(a) {\n    a = ethjsUtil.stripHexPrefix(a);\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}