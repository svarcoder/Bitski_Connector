{"ast":null,"code":"import Subprovider from '../subprovider';\n// wraps a json-rpc-engine middleware in a subprovider interface\nexport class JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n  // take a constructorFn to call once we have a reference to the engine\n  constructor(constructorFn) {\n    super();\n    this.constructorFn = constructorFn;\n  }\n  // this is called once the subprovider has been added to the provider engine\n  setEngine(engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');\n    const blockTracker = engine._blockTracker;\n    const middleware = this.constructorFn({\n      engine,\n      provider: engine,\n      blockTracker\n    });\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');\n    this.middleware = middleware;\n  }\n  handleRequest(req, next, end) {\n    const res = {\n      id: req.id,\n      jsonrpc: '2.0',\n      error: null,\n      result: null\n    };\n    this.middleware(req, res, middlewareNext, middlewareEnd);\n    function middlewareNext(handler) {\n      next((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result;\n          res.error = {\n            message: err.message,\n            code: null\n          };\n        } else {\n          res.result = result;\n        }\n        // call middleware's next handler (even if error)\n        if (handler) {\n          handler(cb);\n        } else {\n          cb();\n        }\n      });\n    }\n    function middlewareEnd(err) {\n      if (err) {\n        end(new Error(err.message));\n      } else {\n        end(null, res.result);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Subprovider","JsonRpcEngineMiddlewareSubprovider","constructor","constructorFn","setEngine","engine","middleware","Error","blockTracker","_blockTracker","provider","handleRequest","req","next","end","res","id","jsonrpc","error","result","middlewareNext","middlewareEnd","handler","err","cb","message","code"],"sources":["/Users/charvai/Desktop/template/node_modules/@bitski/provider-engine/dist/modules/subproviders/json-rpc-engine-middleware.js"],"sourcesContent":["import Subprovider from '../subprovider';\n// wraps a json-rpc-engine middleware in a subprovider interface\nexport class JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n    // take a constructorFn to call once we have a reference to the engine\n    constructor(constructorFn) {\n        super();\n        this.constructorFn = constructorFn;\n    }\n    // this is called once the subprovider has been added to the provider engine\n    setEngine(engine) {\n        if (this.middleware)\n            throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');\n        const blockTracker = engine._blockTracker;\n        const middleware = this.constructorFn({ engine, provider: engine, blockTracker });\n        if (!middleware)\n            throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');\n        if (typeof middleware !== 'function')\n            throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');\n        this.middleware = middleware;\n    }\n    handleRequest(req, next, end) {\n        const res = { id: req.id, jsonrpc: '2.0', error: null, result: null };\n        this.middleware(req, res, middlewareNext, middlewareEnd);\n        function middlewareNext(handler) {\n            next((err, result, cb) => {\n                // update response object with result or error\n                if (err) {\n                    delete res.result;\n                    res.error = { message: err.message, code: null };\n                }\n                else {\n                    res.result = result;\n                }\n                // call middleware's next handler (even if error)\n                if (handler) {\n                    handler(cb);\n                }\n                else {\n                    cb();\n                }\n            });\n        }\n        function middlewareEnd(err) {\n            if (err) {\n                end(new Error(err.message));\n            }\n            else {\n                end(null, res.result);\n            }\n        }\n    }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AACxC;AACA,OAAO,MAAMC,kCAAkC,SAASD,WAAW,CAAC;EAChE;EACAE,WAAW,CAACC,aAAa,EAAE;IACvB,KAAK,EAAE;IACP,IAAI,CAACA,aAAa,GAAGA,aAAa;EACtC;EACA;EACAC,SAAS,CAACC,MAAM,EAAE;IACd,IAAI,IAAI,CAACC,UAAU,EACf,MAAM,IAAIC,KAAK,CAAC,wEAAwE,CAAC;IAC7F,MAAMC,YAAY,GAAGH,MAAM,CAACI,aAAa;IACzC,MAAMH,UAAU,GAAG,IAAI,CAACH,aAAa,CAAC;MAAEE,MAAM;MAAEK,QAAQ,EAAEL,MAAM;MAAEG;IAAa,CAAC,CAAC;IACjF,IAAI,CAACF,UAAU,EACX,MAAM,IAAIC,KAAK,CAAC,+EAA+E,CAAC;IACpG,IAAI,OAAOD,UAAU,KAAK,UAAU,EAChC,MAAM,IAAIC,KAAK,CAAC,6EAA6E,CAAC;IAClG,IAAI,CAACD,UAAU,GAAGA,UAAU;EAChC;EACAK,aAAa,CAACC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAE;IAC1B,MAAMC,GAAG,GAAG;MAAEC,EAAE,EAAEJ,GAAG,CAACI,EAAE;MAAEC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC;IACrE,IAAI,CAACb,UAAU,CAACM,GAAG,EAAEG,GAAG,EAAEK,cAAc,EAAEC,aAAa,CAAC;IACxD,SAASD,cAAc,CAACE,OAAO,EAAE;MAC7BT,IAAI,CAAC,CAACU,GAAG,EAAEJ,MAAM,EAAEK,EAAE,KAAK;QACtB;QACA,IAAID,GAAG,EAAE;UACL,OAAOR,GAAG,CAACI,MAAM;UACjBJ,GAAG,CAACG,KAAK,GAAG;YAAEO,OAAO,EAAEF,GAAG,CAACE,OAAO;YAAEC,IAAI,EAAE;UAAK,CAAC;QACpD,CAAC,MACI;UACDX,GAAG,CAACI,MAAM,GAAGA,MAAM;QACvB;QACA;QACA,IAAIG,OAAO,EAAE;UACTA,OAAO,CAACE,EAAE,CAAC;QACf,CAAC,MACI;UACDA,EAAE,EAAE;QACR;MACJ,CAAC,CAAC;IACN;IACA,SAASH,aAAa,CAACE,GAAG,EAAE;MACxB,IAAIA,GAAG,EAAE;QACLT,GAAG,CAAC,IAAIP,KAAK,CAACgB,GAAG,CAACE,OAAO,CAAC,CAAC;MAC/B,CAAC,MACI;QACDX,GAAG,CAAC,IAAI,EAAEC,GAAG,CAACI,MAAM,CAAC;MACzB;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module"}