{"ast":null,"code":"export var ProviderErrorCode;\n(function (ProviderErrorCode) {\n  // Thrown when accessing subscription features when they are disabled.\n  ProviderErrorCode[ProviderErrorCode[\"SubscriptionsUnavailable\"] = 4000] = \"SubscriptionsUnavailable\";\n  // Thrown when request is missing required params or data\n  ProviderErrorCode[ProviderErrorCode[\"InvalidRequest\"] = 4001] = \"InvalidRequest\";\n  // Ethereum chain doesn't exist when attempting to switch\n  ProviderErrorCode[ProviderErrorCode[\"ChainDoesNotExist\"] = 4902] = \"ChainDoesNotExist\";\n})(ProviderErrorCode || (ProviderErrorCode = {}));\nexport class ProviderError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.name = 'ProviderError';\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProviderError);\n    }\n    this.code = code;\n  }\n  static SubscriptionsUnavailable() {\n    return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);\n  }\n  static InvalidRequest(reason) {\n    return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);\n  }\n}","map":{"version":3,"names":["ProviderErrorCode","ProviderError","Error","constructor","message","code","name","captureStackTrace","SubscriptionsUnavailable","InvalidRequest","reason"],"sources":["/Users/charvai/Desktop/template/node_modules/bitski-provider/dist/errors/provider-error.js"],"sourcesContent":["export var ProviderErrorCode;\n(function (ProviderErrorCode) {\n    // Thrown when accessing subscription features when they are disabled.\n    ProviderErrorCode[ProviderErrorCode[\"SubscriptionsUnavailable\"] = 4000] = \"SubscriptionsUnavailable\";\n    // Thrown when request is missing required params or data\n    ProviderErrorCode[ProviderErrorCode[\"InvalidRequest\"] = 4001] = \"InvalidRequest\";\n    // Ethereum chain doesn't exist when attempting to switch\n    ProviderErrorCode[ProviderErrorCode[\"ChainDoesNotExist\"] = 4902] = \"ChainDoesNotExist\";\n})(ProviderErrorCode || (ProviderErrorCode = {}));\nexport class ProviderError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.name = 'ProviderError';\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ProviderError);\n        }\n        this.code = code;\n    }\n    static SubscriptionsUnavailable() {\n        return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);\n    }\n    static InvalidRequest(reason) {\n        return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);\n    }\n}\n"],"mappings":"AAAA,OAAO,IAAIA,iBAAiB;AAC5B,CAAC,UAAUA,iBAAiB,EAAE;EAC1B;EACAA,iBAAiB,CAACA,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC,GAAG,0BAA0B;EACpG;EACAA,iBAAiB,CAACA,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,GAAG,gBAAgB;EAChF;EACAA,iBAAiB,CAACA,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,GAAG,mBAAmB;AAC1F,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD,OAAO,MAAMC,aAAa,SAASC,KAAK,CAAC;EACrCC,WAAW,CAACC,OAAO,EAAEC,IAAI,EAAE;IACvB,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,eAAe;IAC3B;IACA,IAAIJ,KAAK,CAACK,iBAAiB,EAAE;MACzBL,KAAK,CAACK,iBAAiB,CAAC,IAAI,EAAEN,aAAa,CAAC;IAChD;IACA,IAAI,CAACI,IAAI,GAAGA,IAAI;EACpB;EACA,OAAOG,wBAAwB,GAAG;IAC9B,OAAO,IAAIP,aAAa,CAAC,uEAAuE,EAAED,iBAAiB,CAACQ,wBAAwB,CAAC;EACjJ;EACA,OAAOC,cAAc,CAACC,MAAM,EAAE;IAC1B,OAAO,IAAIT,aAAa,CAAE,oBAAmBS,MAAO,EAAC,EAAEV,iBAAiB,CAACS,cAAc,CAAC;EAC5F;AACJ"},"metadata":{},"sourceType":"module"}