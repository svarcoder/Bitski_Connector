{"ast":null,"code":"import { FetchSubprovider } from '@bitski/provider-engine';\nimport retry from 'async/retry';\nimport { AUTHENTICATED_METHODS, RETRIABLE_ERRORS, UNAUTHORIZED_ERRORS } from '../constants';\nimport { ServerError } from '../errors/server-error';\n/*\n * Subprovider that fetches over HTTP and manages authentication headers\n */\nexport class AuthenticatedFetchSubprovider extends FetchSubprovider {\n  constructor(rpcUrl, debug, accessTokenProvider) {\n    let defaultHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super({\n      rpcUrl\n    });\n    this.authenticatedMethods = AUTHENTICATED_METHODS;\n    this.accessTokenProvider = accessTokenProvider;\n    this.defaultHeaders = defaultHeaders;\n  }\n  handleRequest(payload, next, end) {\n    if (this.requiresAuthentication(payload)) {\n      return this.handleAuthenticatedRequest(payload, next, end);\n    } else {\n      return this.handleUnauthenticatedRequest(payload, next, end);\n    }\n  }\n  handleAuthenticatedRequest(payload, next, end) {\n    this.accessTokenProvider.getAccessToken().then(accessToken => {\n      const parameters = this.generateParameters(payload, accessToken);\n      return this.sendRequest(parameters, next, end);\n    }).catch(error => {\n      end(error);\n    });\n  }\n  handleUnauthenticatedRequest(payload, next, end) {\n    const parameters = this.generateParameters(payload);\n    return this.sendRequest(parameters, next, end);\n  }\n  requiresAuthentication(payload) {\n    return this.authenticatedMethods.some(method => method === payload.method);\n  }\n  generateParameters(payload, accessToken) {\n    // overwrite id to not conflict with other concurrent users\n    const newPayload = this.createPayload(payload);\n    // remove extra parameter from request\n    delete newPayload.origin;\n    let headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n    headers = Object.assign({}, headers, this.defaultHeaders);\n    const originDomain = payload.origin;\n    if (this.originHttpHeaderKey && originDomain) {\n      headers[this.originHttpHeaderKey] = originDomain;\n    }\n    if (accessToken) {\n      headers.Authorization = `Bearer ${accessToken}`;\n    }\n    const requestParameters = {\n      body: JSON.stringify(newPayload),\n      headers,\n      method: 'POST'\n    };\n    return requestParameters;\n  }\n  sendRequest(parameters, next, end) {\n    retry({\n      errorFilter: this.isErrorRetriable,\n      interval: 1000,\n      times: 5\n    }, cb => this._submitRequest(parameters, cb), (err, result) => {\n      // ends on retriable error\n      if (err && this.isErrorRetriable(err)) {\n        const retriesExhaustedErr = new ServerError(err.message, 200, this.rpcUrl, true);\n        return end(retriesExhaustedErr);\n      }\n      if (err && this.isUnauthorizedError(err)) {\n        return this.accessTokenProvider.invalidateToken().then(() => {\n          return end(err);\n        });\n      }\n      // otherwise continue normally\n      return end(err, result);\n    });\n  }\n  isErrorRetriable(err) {\n    const errMsg = err.toString();\n    return RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase));\n  }\n  isUnauthorizedError(err) {\n    return UNAUTHORIZED_ERRORS.some(phrase => err.message.includes(phrase));\n  }\n}","map":{"version":3,"names":["FetchSubprovider","retry","AUTHENTICATED_METHODS","RETRIABLE_ERRORS","UNAUTHORIZED_ERRORS","ServerError","AuthenticatedFetchSubprovider","constructor","rpcUrl","debug","accessTokenProvider","defaultHeaders","authenticatedMethods","handleRequest","payload","next","end","requiresAuthentication","handleAuthenticatedRequest","handleUnauthenticatedRequest","getAccessToken","then","accessToken","parameters","generateParameters","sendRequest","catch","error","some","method","newPayload","createPayload","origin","headers","Accept","Object","assign","originDomain","originHttpHeaderKey","Authorization","requestParameters","body","JSON","stringify","errorFilter","isErrorRetriable","interval","times","cb","_submitRequest","err","result","retriesExhaustedErr","message","isUnauthorizedError","invalidateToken","errMsg","toString","phrase","includes"],"sources":["/Users/charvai/Desktop/template/node_modules/bitski-provider/dist/subproviders/authenticated-fetch.js"],"sourcesContent":["import { FetchSubprovider } from '@bitski/provider-engine';\nimport retry from 'async/retry';\nimport { AUTHENTICATED_METHODS, RETRIABLE_ERRORS, UNAUTHORIZED_ERRORS } from '../constants';\nimport { ServerError } from '../errors/server-error';\n/*\n * Subprovider that fetches over HTTP and manages authentication headers\n */\nexport class AuthenticatedFetchSubprovider extends FetchSubprovider {\n    constructor(rpcUrl, debug, accessTokenProvider, defaultHeaders = {}) {\n        super({ rpcUrl });\n        this.authenticatedMethods = AUTHENTICATED_METHODS;\n        this.accessTokenProvider = accessTokenProvider;\n        this.defaultHeaders = defaultHeaders;\n    }\n    handleRequest(payload, next, end) {\n        if (this.requiresAuthentication(payload)) {\n            return this.handleAuthenticatedRequest(payload, next, end);\n        }\n        else {\n            return this.handleUnauthenticatedRequest(payload, next, end);\n        }\n    }\n    handleAuthenticatedRequest(payload, next, end) {\n        this.accessTokenProvider\n            .getAccessToken()\n            .then((accessToken) => {\n            const parameters = this.generateParameters(payload, accessToken);\n            return this.sendRequest(parameters, next, end);\n        })\n            .catch((error) => {\n            end(error);\n        });\n    }\n    handleUnauthenticatedRequest(payload, next, end) {\n        const parameters = this.generateParameters(payload);\n        return this.sendRequest(parameters, next, end);\n    }\n    requiresAuthentication(payload) {\n        return this.authenticatedMethods.some((method) => method === payload.method);\n    }\n    generateParameters(payload, accessToken) {\n        // overwrite id to not conflict with other concurrent users\n        const newPayload = this.createPayload(payload);\n        // remove extra parameter from request\n        delete newPayload.origin;\n        let headers = {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        };\n        headers = Object.assign({}, headers, this.defaultHeaders);\n        const originDomain = payload.origin;\n        if (this.originHttpHeaderKey && originDomain) {\n            headers[this.originHttpHeaderKey] = originDomain;\n        }\n        if (accessToken) {\n            headers.Authorization = `Bearer ${accessToken}`;\n        }\n        const requestParameters = {\n            body: JSON.stringify(newPayload),\n            headers,\n            method: 'POST',\n        };\n        return requestParameters;\n    }\n    sendRequest(parameters, next, end) {\n        retry({\n            errorFilter: this.isErrorRetriable,\n            interval: 1000,\n            times: 5,\n        }, (cb) => this._submitRequest(parameters, cb), (err, result) => {\n            // ends on retriable error\n            if (err && this.isErrorRetriable(err)) {\n                const retriesExhaustedErr = new ServerError(err.message, 200, this.rpcUrl, true);\n                return end(retriesExhaustedErr);\n            }\n            if (err && this.isUnauthorizedError(err)) {\n                return this.accessTokenProvider.invalidateToken().then(() => {\n                    return end(err);\n                });\n            }\n            // otherwise continue normally\n            return end(err, result);\n        });\n    }\n    isErrorRetriable(err) {\n        const errMsg = err.toString();\n        return RETRIABLE_ERRORS.some((phrase) => errMsg.includes(phrase));\n    }\n    isUnauthorizedError(err) {\n        return UNAUTHORIZED_ERRORS.some((phrase) => err.message.includes(phrase));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}