{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass MergedStore extends ObservableStore_1.ObservableStore {\n  constructor() {\n    let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    // Typecast: Preserve existing behavior\n    super({});\n    this._children = children;\n    // subscribe to children\n    children.forEach(child => this._addChild(child));\n    this._updateWholeState();\n  }\n  _addChild(child) {\n    child.subscribe(() => this._updateWholeState());\n  }\n  _updateWholeState() {\n    const childStates = this._children.map(child => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\nexports.MergedStore = MergedStore;","map":{"version":3,"sources":["../src/MergedStore.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA,MAAa,WAEX,SAAQ,iBAAA,CAAA,eAAkB,CAAA;EAG1B,WAAA,GAAyB;IAAA,IAAb,QAAQ,uEAAG,EAAE;IACvB;IACA,KAAK,CAAC,CAAA,CAAkB,CAAC;IAEzB,IAAI,CAAC,SAAS,GAAG,QAAQ;IACzB;IACA,QAAQ,CAAC,OAAO,CAAE,KAAK,IAAK,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClD,IAAI,CAAC,iBAAiB,EAAE;EAC1B;EAEA,SAAS,CAAC,KAAkC,EAAA;IAC1C,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;EACjD;EAEA,iBAAiB,GAAA;IACf,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAE,KAAK,IAAK,KAAK,CAAC,QAAQ,EAAE,CAAC;IACnE;IACA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,GAAG,WAAW,CAAC;IAC/C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;EACtB;AACD;AAzBD,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class MergedStore<\n  T extends Record<string, unknown>,\n> extends ObservableStore<T> {\n  private _children: ObservableStore<Partial<T>>[];\n\n  constructor(children = []) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    this._children = children;\n    // subscribe to children\n    children.forEach((child) => this._addChild(child));\n    this._updateWholeState();\n  }\n\n  _addChild(child: ObservableStore<Partial<T>>): void {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState(): void {\n    const childStates = this._children.map((child) => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}