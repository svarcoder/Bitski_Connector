{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { IJsonRpcProvider, isJsonRpcResponse, formatJsonRpcRequest, isJsonRpcError } from \"@walletconnect/jsonrpc-utils\";\nexport class JsonRpcProvider extends IJsonRpcProvider {\n  constructor(connection) {\n    super(connection);\n    this.events = new EventEmitter();\n    this.hasRegisteredEventListeners = false;\n    this.connection = this.setConnection(connection);\n    if (this.connection.connected) {\n      this.registerEventListeners();\n    }\n  }\n  async connect() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    await this.open(connection);\n  }\n  async disconnect() {\n    await this.close();\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  async request(request, context) {\n    return this.requestStrict(formatJsonRpcRequest(request.method, request.params || []), context);\n  }\n  async requestStrict(request, context) {\n    return new Promise(async (resolve, reject) => {\n      if (!this.connection.connected) {\n        try {\n          await this.open();\n        } catch (e) {\n          reject(e);\n        }\n      }\n      this.events.on(`${request.id}`, response => {\n        if (isJsonRpcError(response)) {\n          reject(response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n      try {\n        await this.connection.send(request, context);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  setConnection() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    return connection;\n  }\n  onPayload(payload) {\n    this.events.emit(\"payload\", payload);\n    if (isJsonRpcResponse(payload)) {\n      this.events.emit(`${payload.id}`, payload);\n    } else {\n      this.events.emit(\"message\", {\n        type: payload.method,\n        data: payload.params\n      });\n    }\n  }\n  async open() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    if (this.connection === connection && this.connection.connected) return;\n    if (this.connection.connected) this.close();\n    if (typeof connection === \"string\") {\n      await this.connection.open(connection);\n      connection = this.connection;\n    }\n    this.connection = this.setConnection(connection);\n    await this.connection.open();\n    this.registerEventListeners();\n    this.events.emit(\"connect\");\n  }\n  async close() {\n    await this.connection.close();\n  }\n  registerEventListeners() {\n    if (this.hasRegisteredEventListeners) return;\n    this.connection.on(\"payload\", payload => this.onPayload(payload));\n    this.connection.on(\"close\", () => this.events.emit(\"disconnect\"));\n    this.connection.on(\"error\", error => this.events.emit(\"error\", error));\n    this.hasRegisteredEventListeners = true;\n  }\n}\nexport default JsonRpcProvider;","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { EventEmitter } from \"events\";\nimport { IJsonRpcProvider, isJsonRpcResponse, formatJsonRpcRequest, isJsonRpcError, } from \"@walletconnect/jsonrpc-utils\";\nexport class JsonRpcProvider extends IJsonRpcProvider {\n    constructor(connection) {\n        super(connection);\n        this.events = new EventEmitter();\n        this.hasRegisteredEventListeners = false;\n        this.connection = this.setConnection(connection);\n        if (this.connection.connected) {\n            this.registerEventListeners();\n        }\n    }\n    async connect(connection = this.connection) {\n        await this.open(connection);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async request(request, context) {\n        return this.requestStrict(formatJsonRpcRequest(request.method, request.params || []), context);\n    }\n    async requestStrict(request, context) {\n        return new Promise(async (resolve, reject) => {\n            if (!this.connection.connected) {\n                try {\n                    await this.open();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            this.events.on(`${request.id}`, response => {\n                if (isJsonRpcError(response)) {\n                    reject(response.error);\n                }\n                else {\n                    resolve(response.result);\n                }\n            });\n            try {\n                await this.connection.send(request, context);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    setConnection(connection = this.connection) {\n        return connection;\n    }\n    onPayload(payload) {\n        this.events.emit(\"payload\", payload);\n        if (isJsonRpcResponse(payload)) {\n            this.events.emit(`${payload.id}`, payload);\n        }\n        else {\n            this.events.emit(\"message\", {\n                type: payload.method,\n                data: payload.params,\n            });\n        }\n    }\n    async open(connection = this.connection) {\n        if (this.connection === connection && this.connection.connected)\n            return;\n        if (this.connection.connected)\n            this.close();\n        if (typeof connection === \"string\") {\n            await this.connection.open(connection);\n            connection = this.connection;\n        }\n        this.connection = this.setConnection(connection);\n        await this.connection.open();\n        this.registerEventListeners();\n        this.events.emit(\"connect\");\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        if (this.hasRegisteredEventListeners)\n            return;\n        this.connection.on(\"payload\", (payload) => this.onPayload(payload));\n        this.connection.on(\"close\", () => this.events.emit(\"disconnect\"));\n        this.connection.on(\"error\", (error) => this.events.emit(\"error\", error));\n        this.hasRegisteredEventListeners = true;\n    }\n}\nexport default JsonRpcProvider;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}