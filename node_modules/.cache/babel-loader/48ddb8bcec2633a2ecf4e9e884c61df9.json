{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { getRpcUrl, signingMethods } from \"@walletconnect/utils\";\nimport { SignerConnection } from \"@walletconnect/signer-connection\";\nclass WalletConnectProvider {\n  constructor(opts) {\n    this.events = new EventEmitter();\n    this.rpc = {\n      infuraId: opts === null || opts === void 0 ? void 0 : opts.infuraId,\n      custom: opts === null || opts === void 0 ? void 0 : opts.rpc\n    };\n    this.signer = new JsonRpcProvider(new SignerConnection(opts));\n    const chainId = this.signer.connection.chainId || (opts === null || opts === void 0 ? void 0 : opts.chainId) || 1;\n    this.http = this.setHttpProvider(chainId);\n    this.registerEventListeners();\n  }\n  get connected() {\n    return this.signer.connection.connected;\n  }\n  get connector() {\n    return this.signer.connection.connector;\n  }\n  get accounts() {\n    return this.signer.connection.accounts;\n  }\n  get chainId() {\n    return this.signer.connection.chainId;\n  }\n  get rpcUrl() {\n    var _a;\n    return ((_a = this.http) === null || _a === void 0 ? void 0 : _a.connection).url || \"\";\n  }\n  async request(args) {\n    switch (args.method) {\n      case \"eth_requestAccounts\":\n        await this.connect();\n        return this.signer.connection.accounts;\n      case \"eth_accounts\":\n        return this.signer.connection.accounts;\n      case \"eth_chainId\":\n        return this.signer.connection.chainId;\n      default:\n        break;\n    }\n    if (signingMethods.includes(args.method)) {\n      return this.signer.request(args);\n    }\n    if (typeof this.http === \"undefined\") {\n      throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n    }\n    return this.http.request(args);\n  }\n  sendAsync(args, callback) {\n    this.request(args).then(response => callback(null, response)).catch(error => callback(error, undefined));\n  }\n  async enable() {\n    const accounts = await this.request({\n      method: \"eth_requestAccounts\"\n    });\n    return accounts;\n  }\n  async connect() {\n    if (!this.signer.connection.connected) {\n      await this.signer.connect();\n    }\n  }\n  async disconnect() {\n    if (this.signer.connection.connected) {\n      await this.signer.disconnect();\n    }\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  get isWalletConnect() {\n    return true;\n  }\n  registerEventListeners() {\n    this.signer.connection.on(\"accountsChanged\", accounts => {\n      this.events.emit(\"accountsChanged\", accounts);\n    });\n    this.signer.connection.on(\"chainChanged\", chainId => {\n      this.http = this.setHttpProvider(chainId);\n      this.events.emit(\"chainChanged\", chainId);\n    });\n    this.signer.on(\"disconnect\", () => {\n      this.events.emit(\"disconnect\");\n    });\n  }\n  setHttpProvider(chainId) {\n    const rpcUrl = getRpcUrl(chainId, this.rpc);\n    if (typeof rpcUrl === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpcUrl));\n    return http;\n  }\n}\nexport default WalletConnectProvider;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,eAAe;AACxC,SAAS,eAAe,QAAQ,iCAAiC;AACjE,SAAS,cAAc,QAAQ,wCAAwC;AAEvE,SAAS,SAAS,EAAE,cAAc,QAAQ,sBAAsB;AAChE,SAAS,gBAAgB,QAAQ,kCAAkC;AAGnE,MAAM,qBAAqB,CAAA;EAOzB,WAAA,CAAY,IAAiC,EAAA;IANtC,IAAA,CAAA,MAAM,GAAQ,IAAI,YAAY,EAAE;IAOrC,IAAI,CAAC,GAAG,GAAG;MAAE,QAAQ,EAAE,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,QAAQ;MAAE,MAAM,EAAE,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE;IAAG,CAAE;IAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,eAAe,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC7D,MAAM,OAAO,GAAI,IAAI,CAAC,MAAM,CAAC,UAA+B,CAAC,OAAO,KAAI,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,OAAO,CAAA,IAAI,CAAC;IAC1F,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;IACzC,IAAI,CAAC,sBAAsB,EAAE;EAC/B;EAEA,IAAI,SAAS,GAAA;IACX,OAAQ,IAAI,CAAC,MAAM,CAAC,UAA+B,CAAC,SAAS;EAC/D;EAEA,IAAI,SAAS,GAAA;IACX,OAAQ,IAAI,CAAC,MAAM,CAAC,UAA+B,CAAC,SAAS;EAC/D;EAEA,IAAI,QAAQ,GAAA;IACV,OAAQ,IAAI,CAAC,MAAM,CAAC,UAA+B,CAAC,QAAQ;EAC9D;EAEA,IAAI,OAAO,GAAA;IACT,OAAQ,IAAI,CAAC,MAAM,CAAC,UAA+B,CAAC,OAAO;EAC7D;EAEA,IAAI,MAAM,GAAA;;IACR,OAAO,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAA6B,EAAC,GAAG,IAAI,EAAE;EAC5D;EAEO,MAAM,OAAO,CAAc,IAAsB,EAAA;IACtD,QAAQ,IAAI,CAAC,MAAM;MACjB,KAAK,qBAAqB;QACxB,MAAM,IAAI,CAAC,OAAO,EAAE;QACpB,OAAQ,IAAI,CAAC,MAAM,CAAC,UAAkB,CAAC,QAAQ;MACjD,KAAK,cAAc;QACjB,OAAQ,IAAI,CAAC,MAAM,CAAC,UAAkB,CAAC,QAAQ;MACjD,KAAK,aAAa;QAChB,OAAQ,IAAI,CAAC,MAAM,CAAC,UAAkB,CAAC,OAAO;MAChD;QACE;IAAM;IAEV,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;MACxC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;IACjC;IACD,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;MACpC,MAAM,IAAI,KAAK,CAAC,mCAAmC,IAAI,CAAC,MAAM,4BAA4B,CAAC;IAC5F;IACD,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;EAChC;EAEO,SAAS,CACd,IAAsB,EACtB,QAAsD,EAAA;IAEtD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CACf,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAC1C,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;EAC/C;EAEO,MAAM,MAAM,GAAA;IACjB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC;MAAE,MAAM,EAAE;IAAqB,CAAE,CAAC;IACtE,OAAO,QAA4B;EACrC;EAEO,MAAM,OAAO,GAAA;IAClB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE;MACrC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;IAC5B;EACH;EAEO,MAAM,UAAU,GAAA;IACrB,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE;MACpC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;IAC/B;EACH;EAEO,EAAE,CAAC,KAAU,EAAE,QAAa,EAAA;IACjC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;EACjC;EACO,IAAI,CAAC,KAAa,EAAE,QAAa,EAAA;IACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC;EACnC;EACO,cAAc,CAAC,KAAa,EAAE,QAAa,EAAA;IAChD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC;EAC7C;EACO,GAAG,CAAC,KAAa,EAAE,QAAa,EAAA;IACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC;EAClC;EAEA,IAAI,eAAe,GAAA;IACjB,OAAO,IAAI;EACb;EAIQ,sBAAsB,GAAA;IAC5B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,iBAAiB,EAAE,QAAQ,IAAG;MACtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,QAAQ,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE,OAAO,IAAG;MAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;MACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC;IAC3C,CAAC,CAAC;IACF,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,MAAK;MAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAChC,CAAC,CAAC;EACJ;EAEQ,eAAe,CAAC,OAAe,EAAA;IACrC,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;IAC3C,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,OAAO,SAAS;IACnD,MAAM,IAAI,GAAG,IAAI,eAAe,CAAC,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;IAC5D,OAAO,IAAI;EACb;AACD;AAED,eAAe,qBAAqB","sourceRoot":"","sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { getRpcUrl, signingMethods } from \"@walletconnect/utils\";\nimport { SignerConnection } from \"@walletconnect/signer-connection\";\nclass WalletConnectProvider {\n    constructor(opts) {\n        this.events = new EventEmitter();\n        this.rpc = { infuraId: opts === null || opts === void 0 ? void 0 : opts.infuraId, custom: opts === null || opts === void 0 ? void 0 : opts.rpc };\n        this.signer = new JsonRpcProvider(new SignerConnection(opts));\n        const chainId = this.signer.connection.chainId || (opts === null || opts === void 0 ? void 0 : opts.chainId) || 1;\n        this.http = this.setHttpProvider(chainId);\n        this.registerEventListeners();\n    }\n    get connected() {\n        return this.signer.connection.connected;\n    }\n    get connector() {\n        return this.signer.connection.connector;\n    }\n    get accounts() {\n        return this.signer.connection.accounts;\n    }\n    get chainId() {\n        return this.signer.connection.chainId;\n    }\n    get rpcUrl() {\n        var _a;\n        return ((_a = this.http) === null || _a === void 0 ? void 0 : _a.connection).url || \"\";\n    }\n    async request(args) {\n        switch (args.method) {\n            case \"eth_requestAccounts\":\n                await this.connect();\n                return this.signer.connection.accounts;\n            case \"eth_accounts\":\n                return this.signer.connection.accounts;\n            case \"eth_chainId\":\n                return this.signer.connection.chainId;\n            default:\n                break;\n        }\n        if (signingMethods.includes(args.method)) {\n            return this.signer.request(args);\n        }\n        if (typeof this.http === \"undefined\") {\n            throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n        }\n        return this.http.request(args);\n    }\n    sendAsync(args, callback) {\n        this.request(args)\n            .then(response => callback(null, response))\n            .catch(error => callback(error, undefined));\n    }\n    async enable() {\n        const accounts = await this.request({ method: \"eth_requestAccounts\" });\n        return accounts;\n    }\n    async connect() {\n        if (!this.signer.connection.connected) {\n            await this.signer.connect();\n        }\n    }\n    async disconnect() {\n        if (this.signer.connection.connected) {\n            await this.signer.disconnect();\n        }\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    get isWalletConnect() {\n        return true;\n    }\n    registerEventListeners() {\n        this.signer.connection.on(\"accountsChanged\", accounts => {\n            this.events.emit(\"accountsChanged\", accounts);\n        });\n        this.signer.connection.on(\"chainChanged\", chainId => {\n            this.http = this.setHttpProvider(chainId);\n            this.events.emit(\"chainChanged\", chainId);\n        });\n        this.signer.on(\"disconnect\", () => {\n            this.events.emit(\"disconnect\");\n        });\n    }\n    setHttpProvider(chainId) {\n        const rpcUrl = getRpcUrl(chainId, this.rpc);\n        if (typeof rpcUrl === \"undefined\")\n            return undefined;\n        const http = new JsonRpcProvider(new HttpConnection(rpcUrl));\n        return http;\n    }\n}\nexport default WalletConnectProvider;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}