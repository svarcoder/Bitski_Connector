import { AccessTokenProvider } from 'bitski-provider';
import { BitskiSDKOptions } from '../sdk';
import { AuthenticationStatus, OAuthSignInMethod } from '../constants';
import { AuthProvider } from './auth-provider';
import { OAuthManager, SignInOptions } from './oauth-manager';
import { TokenStore } from './token-store';
import { User } from './user';
import { UserStore } from './user-store';
export declare class OpenidAuthProvider implements AccessTokenProvider, AuthProvider {
    oauthManager: OAuthManager;
    tokenStore: TokenStore;
    userStore: UserStore;
    signOutCallback?: () => void;
    private _refreshTokensPromise;
    constructor(clientId: string, redirectUri: string, additionalScopes?: string[], opts?: BitskiSDKOptions);
    getAuthStatus(): Promise<AuthenticationStatus>;
    getAccessToken(): Promise<string>;
    getIdToken(): Promise<string | undefined>;
    getRefreshToken(): Promise<string>;
    invalidateToken(): Promise<void>;
    private refreshTokens;
    refreshAccessToken(): Promise<string>;
    refreshIdToken(): Promise<string | undefined>;
    signIn(method: OAuthSignInMethod, opts?: SignInOptions): Promise<User>;
    connect(): Promise<User>;
    getUser(): Promise<User>;
    signInOrConnect(signInMethod?: OAuthSignInMethod, opts?: SignInOptions): Promise<User>;
    redirectCallback(): Promise<User>;
    signOut(): Promise<any>;
    private getOrFetchUser;
    private loadUser;
    loadFromCache(): void;
}
