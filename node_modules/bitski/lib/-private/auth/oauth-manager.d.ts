import { AuthorizationError, AuthorizationNotifier, AuthorizationRequest, AuthorizationRequestHandler, AuthorizationResponse, AuthorizationServiceConfiguration, TokenRequest, TokenRequestHandler, TokenResponse } from '@openid/appauth';
import { UserInfoResponse } from './user';
export interface OAuthManagerOptions {
    clientId: string;
    redirectUri: string;
    configuration?: AuthorizationServiceConfiguration;
    additionalScopes?: string[];
}
export interface SignInOptions {
    login_hint?: string;
}
export declare const LOGIN_HINT_SIGNUP = "signup";
/**
 * Responsible for submitting requests to our OAuth server.
 */
export declare class OAuthManager {
    configuration: AuthorizationServiceConfiguration;
    protected clientId: string;
    protected redirectUri: string;
    protected tokenHandler: TokenRequestHandler;
    protected notifier: AuthorizationNotifier;
    protected authHandler?: AuthorizationRequestHandler;
    protected pendingResolver?: {
        fulfill: (value: AuthorizationResponse) => void;
        reject: (error: Error) => void;
    };
    protected scopes: string[];
    /**
     * Create a new OAuth Manager
     * @param options Settings object
     * @param options.clientId string: The client id to use for various requests
     * @param options.redirectUri string: The redirect URI to use for responding to auth requests
     * @param options.configuration AuthorizationServiceConfiguration (optional): The configuration for the OAuth server
     * @param options.additionalScopes string[] (optional): Additional scopes to request outside of openid.
     * Default is offline. Pass an empty array to only request openid.
     */
    constructor(options: OAuthManagerOptions);
    /**
     * Trigger a popup sign in flow (the default)
     */
    signInPopup(opts?: SignInOptions): Promise<TokenResponse>;
    /**
     * Trigger a redirect sign in flow. Promise should never fulfill, as you will be redirected.
     */
    signInRedirect(opts?: SignInOptions): Promise<AuthorizationResponse>;
    /**
     * Attempt to finalize auth request from a redirect flow. Called from your redirect url once you've been
     * redirected back.
     */
    redirectCallback(): Promise<TokenResponse>;
    /**
     * Exchange an authorization code for an access token
     * @param code The authorization code to exchange
     */
    requestAccessToken(code: string): Promise<TokenResponse>;
    /**
     * Request a new access token from a previous refresh token
     * @param refreshToken The refresh token to use for authorization
     */
    refreshAccessToken(refreshToken: string): Promise<TokenResponse>;
    /**
     * Submit a sign out request on the oauth endpoint
     * @param accessToken The access token to sign out with
     */
    requestSignOut(accessToken: string): Promise<any>;
    /**
     * Request a user's profile from the oauth server
     * @param accessToken The access token for the user
     */
    requestUserInfo(accessToken: string): Promise<UserInfoResponse>;
    /**
     * Internal callback from our Auth Request handler. Passes the response through to a cached promise if it exists.
     * @param request The original auth request
     * @param response The auth response if it was successful
     * @param errorResponse The error response if it failed
     */
    protected didCompleteAuthorizationFlow(request: AuthorizationRequest, response: AuthorizationResponse | null, errorResponse: AuthorizationError | null): void;
    /**
     * Factory method to create an auth request
     */
    protected createAuthRequest(opts: SignInOptions): AuthorizationRequest;
    /**
     * Factory method to create a token request with a refresh token
     * @param refreshToken Refresh token to use
     */
    protected createRefreshTokenRequest(refreshToken: string): TokenRequest;
    /**
     * Factory method to create a token request with an auth code
     * @param code The auth code to use
     */
    protected createTokenRequest(code: string): TokenRequest;
}
