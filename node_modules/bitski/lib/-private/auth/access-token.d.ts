import { TokenResponse } from '@openid/appauth';
/**
 * Represents a Bitski access token
 */
export declare class AccessToken {
    /**
     * Creates a token from a TokenResponse object
     * @param tokenResponse The token response object to build a token from
     */
    static fromTokenResponse(tokenResponse: TokenResponse): AccessToken;
    /**
     * Creates a token from a storage string
     * @param s JSON string representing the token
     */
    static fromString(s: string): AccessToken | undefined;
    /**
     * The actual access token
     */
    token: string;
    /**
     * When the token expires (in seconds)
     */
    expiresAt?: number;
    /**
     * Scopes this token has access to
     */
    scope?: string;
    /**
     * Calculates if the token is still active
     */
    get expired(): boolean;
    /**
     *
     * @param token the access token
     * @param expiresAt the token expiration date (in seconds) (optional)
     * @param scope the scopes this token represents (optional)
     */
    constructor(token: string, expiresAt?: number, scope?: string);
    /**
     * Returns a JSON string suitable for writing in local storage
     */
    toStorageString(): string;
}
