import { AuthorizationError, AuthorizationRequest, AuthorizationRequestHandler, AuthorizationRequestResponse, AuthorizationServiceConfiguration, BasicQueryStringUtils, DefaultCrypto } from '@openid/appauth';
import { PopupValidator } from '../utils/popup-validator';
export declare class PopupClosedError extends AuthorizationError {
    constructor();
}
export declare class PopupBlockedError extends AuthorizationError {
    constructor();
}
export declare class PopupRequestHandler extends AuthorizationRequestHandler {
    protected pendingRequest?: AuthorizationRequest;
    protected popupWindow: Window | null;
    protected id?: string;
    protected responseUrl?: Location;
    protected closedTimer?: number;
    protected isCancelled: boolean;
    protected isBlocked: boolean;
    protected error?: Error;
    protected validator: PopupValidator;
    constructor(utils?: BasicQueryStringUtils, crypto?: DefaultCrypto);
    performAuthorizationRequest(configuration: AuthorizationServiceConfiguration, request: AuthorizationRequest): void;
    callback(url: Location): void;
    completeAuthorizationRequestIfPossible(): Promise<void>;
    completeAuthorizationRequest(): Promise<AuthorizationRequestResponse | null>;
    protected respondWithBlocked(request: AuthorizationRequest): Promise<AuthorizationRequestResponse>;
    protected respondWithCancelled(request: AuthorizationRequest): Promise<AuthorizationRequestResponse>;
    protected respondWithError(request: AuthorizationRequest, errorMessage: string, errorDescription?: string, errorUri?: string): Promise<AuthorizationRequestResponse>;
    protected respondWithCode(request: AuthorizationRequest, code?: string): Promise<AuthorizationRequestResponse>;
    protected cleanup(): void;
    protected checkPopup(): void;
}
