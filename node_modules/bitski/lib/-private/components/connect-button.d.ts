import { SignInOptions } from '../auth/oauth-manager';
import type { BitskiSDK } from '../sdk';
import { OAuthSignInMethod } from '../constants';
/**
 * Sizing options for the Bitski connect button.
 */
export declare enum ConnectButtonSize {
    Small = "SMALL",
    Medium = "MEDIUM",
    Large = "LARGE"
}
/**
 * Options for the connect button component
 */
export interface ConnectButtonOptions {
    authMethod?: OAuthSignInMethod;
    signInOptions?: SignInOptions;
    container?: HTMLElement;
    size?: ConnectButtonSize;
}
/**
 * A button used to connect to Bitski.
 */
export declare class ConnectButton {
    element: HTMLElement;
    size: ConnectButtonSize;
    callback?: (error?: Error, user?: any) => void;
    onCancel?: () => void;
    private sdk;
    private authIntegrationType;
    private signInOptions;
    /**
     * @param authProvider An instance of an AuthProvider to process sign in requests.
     * @param options Optional ConnectButtonOptions to configure your button.
     * @param callback Optional callback to be called after successful or failed log in attempt.
     * You can also set this directly later with the `callback` property.
     */
    constructor(sdk: Promise<Pick<BitskiSDK, 'signInOrConnect'> | null>, options?: ConnectButtonOptions, callback?: (error?: Error, user?: any) => void);
    /**
     * Removes the button from the page
     */
    remove(): void;
    private signin;
    private configureElement;
}
