import { Transaction } from '../subproviders/signature';
interface JSONTransactionObject {
    transaction: Transaction;
}
/**
 * This class is responsible for signing transactions. It only knows about Bitski's proprietary transaction objects.
 * It is also the only class that knows about the iframe signing implementation.
 */
export declare class BitskiTransactionSigner {
    protected webBaseUrl: string;
    protected apiBaseUrl: string;
    protected defaultHeaders: any;
    private currentRequestDialog?;
    private callbackURL?;
    private currentRequest?;
    constructor(webBaseUrl: string, apiBaseUrl: string, defaultHeaders: any, callbackURL: string | undefined);
    sign(transaction: Transaction, accessToken: string): Promise<string>;
    /**
     * Event listener for callbacks from the iframe
     * @param event MessageEvent received from the browser
     */
    protected receiveMessage(event: MessageEvent): void;
    protected handleCallback(callback: any): void;
    /**
     * Responsible for submitting the Transaction object to the API
     * @param transaction The Transaction object to submit
     * @param accessToken The current user's access token
     */
    protected submitTransaction(transaction: Transaction, accessToken: string): Promise<JSONTransactionObject>;
    /**
     * Displays the authorization form in a modal window
     * @param transaction The transaction that has been submitted
     */
    protected showAuthorizationModal(transaction: Transaction): Promise<any>;
    protected redirectToCallbackURL(transaction: Transaction): Promise<string>;
}
export {};
