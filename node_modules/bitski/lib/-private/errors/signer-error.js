"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerError = exports.SignerErrorCode = void 0;
var SignerErrorCode;
(function (SignerErrorCode) {
    // The signer module received a request to sign via an unsupported RPC method
    SignerErrorCode[SignerErrorCode["UnsupportedMethod"] = 3000] = "UnsupportedMethod";
    // The user cancelled or rejected the transaction
    SignerErrorCode[SignerErrorCode["UserCancelled"] = 3001] = "UserCancelled";
    // The request is missing params for the transaction.
    // Check that params is an array, and the transaction is the first object.
    SignerErrorCode[SignerErrorCode["MissingTransaction"] = 3002] = "MissingTransaction";
    // The message signature request is missing expected params.
    // Check that params is an array, and that they include both a from address, and a message to sign.
    SignerErrorCode[SignerErrorCode["MissingMessage"] = 3003] = "MissingMessage";
    // Missing from address in typed data request
    SignerErrorCode[SignerErrorCode["MissingFrom"] = 3004] = "MissingFrom";
    // Missing typed data params. Make sure params is an array and includes
    // both a from address, and a typed data payload.
    SignerErrorCode[SignerErrorCode["MissingTypedData"] = 3005] = "MissingTypedData";
})(SignerErrorCode = exports.SignerErrorCode || (exports.SignerErrorCode = {}));
class SignerError extends Error {
    constructor(message, code) {
        super(message);
        this.name = 'TransactionError';
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, SignerError);
        }
        this.code = code;
    }
    static UnsupportedMethod() {
        return new SignerError('The method requested is not currently supported.', SignerErrorCode.UnsupportedMethod);
    }
    static UserCancelled() {
        return new SignerError('The user cancelled this transaction', SignerErrorCode.UserCancelled);
    }
    static MissingTransaction() {
        return new SignerError('Could not find transaction in request', SignerErrorCode.MissingTransaction);
    }
    static MissingMessage() {
        return new SignerError('Could not find message params in request', SignerErrorCode.MissingMessage);
    }
    static MissingFrom() {
        return new SignerError('Could not find from address in request params.', SignerErrorCode.MissingFrom);
    }
    static MissingTypedData() {
        return new SignerError('Could not find data to sign in request params.', SignerErrorCode.MissingTypedData);
    }
}
exports.SignerError = SignerError;
//# sourceMappingURL=signer-error.js.map