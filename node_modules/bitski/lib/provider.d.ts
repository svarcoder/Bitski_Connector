import SafeEventEmitter from '@metamask/safe-event-emitter';
import type { JSONRPCRequest, JSONRPCResponse, Subprovider } from '@bitski/provider-engine';
import type { BufferBlock } from '@bitski/provider-engine/dist/modules/util/block-tracker';
import type { BitskiSDK, ProviderOptions } from './-private/sdk';
import { type Network } from 'bitski-provider/lib/network';
import { BitskiBrowserEngine } from './-private/providers/bitski-browser-engine';
interface RequestArguments {
    method: string;
    params?: unknown[] | object;
}
interface BitskiWeb3Provider {
    currentBlock?: BufferBlock;
    supportsSubscriptions(): boolean;
    subscribe(subscribeMethod: string | undefined, subscriptionMethod: string, parameters: any[]): Promise<string>;
    unsubscribe(subscriptionId: string, unsubscribeMethod?: string): Promise<boolean>;
    isRunning(): boolean;
    start(): void;
    stop(): void;
    addProvider(source: Subprovider, index?: number): void;
    removeProvider(source: Subprovider): void;
}
declare type JSONRPCResponseHandler = (error: null | Error, response?: JSONRPCResponse) => void;
export interface LegacySendProvider {
    send(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
    send(method: string, params: unknown[]): Promise<JSONRPCResponse>;
}
export interface LegacySendAsyncProvider {
    sendAsync(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
}
export interface EIP1193Provider {
    request(request: RequestArguments, requestOptions?: unknown): Promise<unknown>;
}
interface AddEthereumChainParameter {
    chainId: string;
    blockExplorerUrls?: string[];
    chainName?: string;
    iconUrls?: string[];
    nativeCurrency?: {
        name: string;
        symbol: string;
        decimals: number;
    };
    rpcUrls: string[];
}
export interface NetworkProviderStore {
    get(key: Network): BitskiBrowserEngine | undefined;
    set(key: Network, engine: BitskiBrowserEngine): void;
    forEach(fn: (provider: BitskiBrowserEngine) => void): void;
}
export interface NetworkStore {
    get(key: string): Promise<Network | undefined>;
    add(network: AddEthereumChainParameter): Promise<void>;
}
export declare class BitskiProvider extends SafeEventEmitter implements BitskiWeb3Provider, LegacySendAsyncProvider, LegacySendProvider, EIP1193Provider {
    private sdkPromise;
    private currentProviderPromise;
    private providerOptions;
    private currentProvider;
    private currentChainId;
    private subproviders;
    private networkStore;
    private networkProviderStore;
    private subscriptionMap;
    constructor(sdkPromise: Promise<Pick<BitskiSDK, 'createProvider'> | null>, network: Network, options?: ProviderOptions, networkStore?: NetworkStore, networkProviderStore?: NetworkProviderStore);
    get currentBlock(): BufferBlock | undefined;
    supportsSubscriptions(): boolean;
    subscribe(subscribeMethod: string | undefined, subscriptionMethod: string, parameters: any[]): Promise<string>;
    unsubscribe(subscriptionId: string, unsubscribeMethod?: string): Promise<boolean>;
    isRunning(): boolean;
    start(): void;
    stop(): void;
    addProvider(source: Subprovider, index?: number): void;
    removeProvider(source: Subprovider): void;
    request({ method, params }: RequestArguments): Promise<unknown>;
    send(method: string, params: unknown[]): Promise<JSONRPCResponse>;
    send(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
    /**
     * @deprecated Please use `.request` instead.
     * @param payload - Request Payload
     */
    sendAsync(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
    private addChain;
    private switchChain;
    private setupChain;
}
export {};
