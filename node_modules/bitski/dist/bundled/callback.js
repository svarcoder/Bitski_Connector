(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _callback = require("./utils/callback");

// Call the callback immediately
try {
  (0, _callback.processCallback)();
} catch (error) {
  console.error('Error logging in: ' + error); // tslint:disable-line
}

},{"./utils/callback":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseUrlParams = parseUrlParams;
exports.processCallback = processCallback;

/**
 * Automatically handles finalizing the oauth sign in process with the Bitski SDK
 */
function processCallback() {
  if (window.opener) {
    notifyOpener(window.location);
  } else {
    throw new Error('Parent window could not be found');
  }
}
/**
 * Notifies the opener when in a popup
 * @param url the url that contains the query params
 */


function notifyOpener(url) {
  if (window.opener) {
    if (url) {
      // parse url to get state
      const data = parseUrlParams(url);

      if (data.state) {
        const name = `popupCallback_${data.state}`;
        const callback = window.opener[name];

        if (callback) {
          callback(url);
        } else {
          throw new Error('No callback found on opener');
        }
      } else {
        throw new Error('No state found in response');
      }
    }
  } else {
    throw new Error('No window.opener');
  }
}
/**
 * Extracts query params from the hash of the url
 * @param url the url to parse
 */


function parseUrlParams(url) {
  let params;

  if (url.href.includes('#')) {
    params = extractQuery(url.hash);
  } else if (url.href.includes('?')) {
    params = url.search.split('?').pop();
  }

  if (!params) {
    throw new Error('No params found in result');
  }

  return params.split('&').reduce((prev, item) => {
    const [key, value] = item.split('=');

    if (key && value) {
      prev[decodeURIComponent(key)] = decodeURIComponent(value);
    }

    return prev;
  }, {});
}

function extractQuery(url) {
  if (!url.includes('#')) {
    throw new Error('No params found in result');
  }

  return url.split('#').pop();
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkaXN0L2VzbS8tcHJpdmF0ZS9jYWxsYmFjay5qcyIsImRpc3QvZXNtLy1wcml2YXRlL3V0aWxzL2NhbGxiYWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTs7QUFDQTtBQUNBLElBQUk7RUFDQTtBQUNILENBRkQsQ0FHQSxPQUFPLEtBQVAsRUFBYztFQUNWLE9BQU8sQ0FBQyxLQUFSLENBQWMsdUJBQXVCLEtBQXJDLEVBRFUsQ0FDbUM7QUFDaEQ7Ozs7Ozs7Ozs7O0FDUEQ7QUFDQTtBQUNBO0FBQ08sU0FBUyxlQUFULEdBQTJCO0VBQzlCLElBQUksTUFBTSxDQUFDLE1BQVgsRUFBbUI7SUFDZixZQUFZLENBQUMsTUFBTSxDQUFDLFFBQVIsQ0FBWjtFQUNILENBRkQsTUFHSztJQUNELE1BQU0sSUFBSSxLQUFKLENBQVUsa0NBQVYsQ0FBTjtFQUNIO0FBQ0o7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBUyxZQUFULENBQXNCLEdBQXRCLEVBQTJCO0VBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQVgsRUFBbUI7SUFDZixJQUFJLEdBQUosRUFBUztNQUNMO01BQ0EsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUQsQ0FBM0I7O01BQ0EsSUFBSSxJQUFJLENBQUMsS0FBVCxFQUFnQjtRQUNaLE1BQU0sSUFBSSxHQUFJLGlCQUFnQixJQUFJLENBQUMsS0FBTSxFQUF6QztRQUNBLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBZCxDQUFqQjs7UUFDQSxJQUFJLFFBQUosRUFBYztVQUNWLFFBQVEsQ0FBQyxHQUFELENBQVI7UUFDSCxDQUZELE1BR0s7VUFDRCxNQUFNLElBQUksS0FBSixDQUFVLDZCQUFWLENBQU47UUFDSDtNQUNKLENBVEQsTUFVSztRQUNELE1BQU0sSUFBSSxLQUFKLENBQVUsNEJBQVYsQ0FBTjtNQUNIO0lBQ0o7RUFDSixDQWxCRCxNQW1CSztJQUNELE1BQU0sSUFBSSxLQUFKLENBQVUsa0JBQVYsQ0FBTjtFQUNIO0FBQ0o7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBUyxjQUFULENBQXdCLEdBQXhCLEVBQTZCO0VBQ2hDLElBQUksTUFBSjs7RUFDQSxJQUFJLEdBQUcsQ0FBQyxJQUFKLENBQVMsUUFBVCxDQUFrQixHQUFsQixDQUFKLEVBQTRCO0lBQ3hCLE1BQU0sR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUwsQ0FBckI7RUFDSCxDQUZELE1BR0ssSUFBSSxHQUFHLENBQUMsSUFBSixDQUFTLFFBQVQsQ0FBa0IsR0FBbEIsQ0FBSixFQUE0QjtJQUM3QixNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQUosQ0FBVyxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLEVBQVQ7RUFDSDs7RUFDRCxJQUFJLENBQUMsTUFBTCxFQUFhO0lBQ1QsTUFBTSxJQUFJLEtBQUosQ0FBVSwyQkFBVixDQUFOO0VBQ0g7O0VBQ0QsT0FBTyxNQUFNLENBQUMsS0FBUCxDQUFhLEdBQWIsRUFBa0IsTUFBbEIsQ0FBeUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxLQUFnQjtJQUM1QyxNQUFNLENBQUMsR0FBRCxFQUFNLEtBQU4sSUFBZSxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBckI7O0lBQ0EsSUFBSSxHQUFHLElBQUksS0FBWCxFQUFrQjtNQUNkLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFELENBQW5CLENBQUosR0FBZ0Msa0JBQWtCLENBQUMsS0FBRCxDQUFsRDtJQUNIOztJQUNELE9BQU8sSUFBUDtFQUNILENBTk0sRUFNSixFQU5JLENBQVA7QUFPSDs7QUFDRCxTQUFTLFlBQVQsQ0FBc0IsR0FBdEIsRUFBMkI7RUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFKLENBQWEsR0FBYixDQUFMLEVBQXdCO0lBQ3BCLE1BQU0sSUFBSSxLQUFKLENBQVUsMkJBQVYsQ0FBTjtFQUNIOztFQUNELE9BQU8sR0FBRyxDQUFDLEtBQUosQ0FBVSxHQUFWLEVBQWUsR0FBZixFQUFQO0FBQ0giLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgeyBwcm9jZXNzQ2FsbGJhY2sgfSBmcm9tICcuL3V0aWxzL2NhbGxiYWNrJztcbi8vIENhbGwgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5XG50cnkge1xuICAgIHByb2Nlc3NDYWxsYmFjaygpO1xufVxuY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9nZ2luZyBpbjogJyArIGVycm9yKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxufVxuIiwiLyoqXG4gKiBBdXRvbWF0aWNhbGx5IGhhbmRsZXMgZmluYWxpemluZyB0aGUgb2F1dGggc2lnbiBpbiBwcm9jZXNzIHdpdGggdGhlIEJpdHNraSBTREtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NDYWxsYmFjaygpIHtcbiAgICBpZiAod2luZG93Lm9wZW5lcikge1xuICAgICAgICBub3RpZnlPcGVuZXIod2luZG93LmxvY2F0aW9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyZW50IHdpbmRvdyBjb3VsZCBub3QgYmUgZm91bmQnKTtcbiAgICB9XG59XG4vKipcbiAqIE5vdGlmaWVzIHRoZSBvcGVuZXIgd2hlbiBpbiBhIHBvcHVwXG4gKiBAcGFyYW0gdXJsIHRoZSB1cmwgdGhhdCBjb250YWlucyB0aGUgcXVlcnkgcGFyYW1zXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeU9wZW5lcih1cmwpIHtcbiAgICBpZiAod2luZG93Lm9wZW5lcikge1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAvLyBwYXJzZSB1cmwgdG8gZ2V0IHN0YXRlXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcGFyc2VVcmxQYXJhbXModXJsKTtcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGBwb3B1cENhbGxiYWNrXyR7ZGF0YS5zdGF0ZX1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gd2luZG93Lm9wZW5lcltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FsbGJhY2sgZm91bmQgb24gb3BlbmVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzdGF0ZSBmb3VuZCBpbiByZXNwb25zZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHdpbmRvdy5vcGVuZXInKTtcbiAgICB9XG59XG4vKipcbiAqIEV4dHJhY3RzIHF1ZXJ5IHBhcmFtcyBmcm9tIHRoZSBoYXNoIG9mIHRoZSB1cmxcbiAqIEBwYXJhbSB1cmwgdGhlIHVybCB0byBwYXJzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmxQYXJhbXModXJsKSB7XG4gICAgbGV0IHBhcmFtcztcbiAgICBpZiAodXJsLmhyZWYuaW5jbHVkZXMoJyMnKSkge1xuICAgICAgICBwYXJhbXMgPSBleHRyYWN0UXVlcnkodXJsLmhhc2gpO1xuICAgIH1cbiAgICBlbHNlIGlmICh1cmwuaHJlZi5pbmNsdWRlcygnPycpKSB7XG4gICAgICAgIHBhcmFtcyA9IHVybC5zZWFyY2guc3BsaXQoJz8nKS5wb3AoKTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBwYXJhbXMgZm91bmQgaW4gcmVzdWx0Jyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXMuc3BsaXQoJyYnKS5yZWR1Y2UoKHByZXYsIGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gaXRlbS5zcGxpdCgnPScpO1xuICAgICAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XG4gICAgICAgICAgICBwcmV2W2RlY29kZVVSSUNvbXBvbmVudChrZXkpXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZXh0cmFjdFF1ZXJ5KHVybCkge1xuICAgIGlmICghdXJsLmluY2x1ZGVzKCcjJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBwYXJhbXMgZm91bmQgaW4gcmVzdWx0Jyk7XG4gICAgfVxuICAgIHJldHVybiB1cmwuc3BsaXQoJyMnKS5wb3AoKTtcbn1cbiJdfQ==
