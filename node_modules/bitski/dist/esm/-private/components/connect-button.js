import { OAuthSignInMethod } from '../constants';
import { AuthenticationError, AuthenticationErrorCode } from '../errors/authentication-error';
/**
 * Sizing options for the Bitski connect button.
 */
export var ConnectButtonSize;
(function (ConnectButtonSize) {
    ConnectButtonSize["Small"] = "SMALL";
    ConnectButtonSize["Medium"] = "MEDIUM";
    ConnectButtonSize["Large"] = "LARGE";
})(ConnectButtonSize || (ConnectButtonSize = {}));
/**
 * A button used to connect to Bitski.
 */
export class ConnectButton {
    /**
     * @param authProvider An instance of an AuthProvider to process sign in requests.
     * @param options Optional ConnectButtonOptions to configure your button.
     * @param callback Optional callback to be called after successful or failed log in attempt.
     * You can also set this directly later with the `callback` property.
     */
    constructor(sdk, options, callback) {
        // Set options to object if undefined
        options = options || {};
        // Configure instance
        this.sdk = sdk;
        this.size = options.size || ConnectButtonSize.Medium;
        this.authIntegrationType = options.authMethod || OAuthSignInMethod.Popup;
        this.callback = callback;
        this.signInOptions = options.signInOptions || {};
        // Create the element
        this.element = document.createElement('button');
        this.configureElement();
        this.element.addEventListener('click', this.signin.bind(this));
        // Embed if needed
        if (options.container) {
            options.container.appendChild(this.element);
        }
    }
    /**
     * Removes the button from the page
     */
    remove() {
        if (this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
    }
    async signin() {
        const sdk = await this.sdk;
        if (sdk === null) {
            throw new Error('Bitski SDK is not available');
        }
        try {
            const user = await sdk.signInOrConnect(this.authIntegrationType, this.signInOptions);
            if (this.callback) {
                this.callback(undefined, user);
            }
        }
        catch (error) {
            // Check for cancellation
            if (error instanceof AuthenticationError &&
                error.code === AuthenticationErrorCode.UserCancelled) {
                // Not a real error, the user just cancelled. Trigger cancellation callback.
                if (this.onCancel) {
                    this.onCancel();
                }
            }
            else if (this.callback) {
                // Real error. Forward to main callback.
                this.callback(error, undefined);
            }
        }
    }
    configureElement() {
        this.element.title = 'Continue with Bitski';
        this.element.innerText = 'Continue with Bitski';
        this.element.className = 'bitski-connect-button';
        let sizeClass = '';
        switch (this.size) {
            case ConnectButtonSize.Small:
                sizeClass = 'size-small';
                break;
            case ConnectButtonSize.Medium:
                sizeClass = 'size-medium';
                break;
            case ConnectButtonSize.Large:
                sizeClass = 'size-large';
                break;
        }
        this.element.classList.add(sizeClass);
    }
}
