export var AuthenticationErrorCode;
(function (AuthenticationErrorCode) {
    // The user is not currently signed in
    AuthenticationErrorCode[AuthenticationErrorCode["NotSignedIn"] = 1000] = "NotSignedIn";
    // The user cancelled the auth request
    AuthenticationErrorCode[AuthenticationErrorCode["UserCancelled"] = 1001] = "UserCancelled";
    // Either you did not request offline access, or the user did not approve your app for offline access
    AuthenticationErrorCode[AuthenticationErrorCode["NoRefreshToken"] = 1002] = "NoRefreshToken";
    // You requested silent sign in, which is deprecated
    AuthenticationErrorCode[AuthenticationErrorCode["UnsupportedAuthenticationMethod"] = 1003] = "UnsupportedAuthenticationMethod";
    // We received an error from the oauth server
    AuthenticationErrorCode[AuthenticationErrorCode["ServerError"] = 1004] = "ServerError";
    // The SDK is configured incorrectly
    AuthenticationErrorCode[AuthenticationErrorCode["InvalidConfiguration"] = 1005] = "InvalidConfiguration";
    // Popup blocked
    AuthenticationErrorCode[AuthenticationErrorCode["PopupBlocked"] = 1006] = "PopupBlocked";
})(AuthenticationErrorCode || (AuthenticationErrorCode = {}));
/**
 * Represents an error that is thrown during the authentication process
 */
export class AuthenticationError extends Error {
    constructor(message, code) {
        super(message);
        this.name = 'AuthenticationError';
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, AuthenticationError);
        }
        this.code = code;
    }
    // throw AuthenticationError.NotSignedIn()
    static NotSignedIn() {
        return new AuthenticationError('Not signed in.', AuthenticationErrorCode.NotSignedIn);
    }
    // throw AuthenticationError.UserCancelled()
    static UserCancelled() {
        return new AuthenticationError('Sign in request was cancelled.', AuthenticationErrorCode.UserCancelled);
    }
    // throw AuthenticationError.NoRefreshToken()
    static NoRefreshToken() {
        return new AuthenticationError('Refresh token is not available.', AuthenticationErrorCode.NoRefreshToken);
    }
    // throw AuthenticationError.UnsupportedAuthenticationMethod()
    static UnsupportedAuthenticationMethod() {
        return new AuthenticationError('Sign in method not supported.', AuthenticationErrorCode.UnsupportedAuthenticationMethod);
    }
    // throw AuthenticationError.PopupBlocked()
    static PopupBlocked(baseUrl) {
        const msg = `The popup was blocked. Please make sure ${baseUrl} is allowed to open popups.`;
        return new AuthenticationError(msg, AuthenticationErrorCode.PopupBlocked);
    }
    // throw Authentication Error.ServerError(message, description)
    static ServerError(message, description) {
        const err = new AuthenticationError(`Error from the server: ${message}`, AuthenticationErrorCode.ServerError);
        err.description = description;
        return err;
    }
    // throw AuthenticationError.InvalidConfiguration()
    static InvalidConfiguration(reason) {
        return new AuthenticationError(`The OAuth Configuration is invalid: ${reason}`, AuthenticationErrorCode.InvalidConfiguration);
    }
}
