import { OpenidAuthProvider } from './auth/openid-auth-provider';
import { OAuthSignInMethod, SDK_VERSION } from './constants';
import { BitskiBrowserEngine } from './providers/bitski-browser-engine';
import css from './styles/index';
/**
 * Bitski SDK
 */
export class BitskiSDK {
    /**
     * @param clientId OAuth Client ID
     * @param redirectUri Redirect uri, defaults to the current url. This should be the location of your callback html file.
     * @param additionalScopes To use custom scopes, add them here. The default value is ['offline'].
     * Note: Make sure your app is approved for the scopes you are requesting first.
     * @param options Other OAuth settings. Don't change these unless you know what you are doing.
     */
    constructor(clientId, redirectUri, additionalScopes, options) {
        this.signoutHandlers = [];
        this.clientId = clientId;
        this.sdkVersion = SDK_VERSION;
        this.authProvider = new OpenidAuthProvider(clientId, redirectUri || window.location.href, additionalScopes, options);
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            if (document && document.body) {
                this.injectStyles();
            }
            else {
                window.addEventListener('load', () => {
                    this.injectStyles();
                });
            }
        }
        this.authProvider.signOutCallback = this.onSignOut.bind(this);
    }
    /**
     * Signs in or connects to bitski depending on the user's auth state.
     * Since it may open a popup, this method must be called from user interaction handler,
     * such as a click or tap handler.
     * @param options Provide SignInOptions for the sign in request. See signIn() for more info.
     */
    signInOrConnect(method, options) {
        return this.authProvider.signInOrConnect(method, options);
    }
    /**
     * Check the logged in state of the user
     */
    getAuthStatus() {
        return this.authProvider.getAuthStatus();
    }
    /**
     * Starts the sign in flow. Will trigger a popup window over your app, so it must be called within a user interaction handler such as a click.
     * @param options Optionally provide additional options for the sign in request.
     *
     * You can use the options parameter to request that we show the sign up form instead of the sign in form:
     * ```javascript
     * import { LOGIN_HINT_SIGNUP } from 'bitski';
     *
     * await bitski.signIn({ login_hint: LOGIN_HINT_SIGNUP });
     * ```
     */
    signIn(options) {
        return this.authProvider.signIn(OAuthSignInMethod.Popup, options);
    }
    /**
     * Gets the current signed in user. Will reject if we are not signed in.
     */
    getUser() {
        return this.authProvider.getUser();
    }
    /**
     * Connects to bitski to get a valid access token if possible.
     */
    connect() {
        return this.authProvider.connect();
    }
    /**
     * Starts redirect sign in flow. This is an alternative flow to the popup that all takes place in the same browser window.
     * @param options Optionally provide additional options for the sign in request. See signIn() for more info.
     */
    signInRedirect(options) {
        this.authProvider.signIn(OAuthSignInMethod.Redirect, options);
    }
    /**
     * Call from your oauth redirect page.
     */
    redirectCallback() {
        return this.authProvider.redirectCallback();
    }
    /**
     * Retrieves the current access token for the user, if logged in.
     */
    getCurrentAccessToken() {
        return this.authProvider.getAccessToken();
    }
    /**
     * Retrieves the current ID token for the user, if logged in.
     */
    getCurrentIdToken() {
        return this.authProvider.getIdToken();
    }
    /**
     * Retrieves the current refresh token for the user, if logged in.
     * Requires that the user has approved your application for offline access.
     */
    getCurrentRefreshToken() {
        return this.authProvider.getRefreshToken();
    }
    /**
     * Register a callback to be called on sign out. This is a good practice,
     * since there may be situations where you are signed out unexpectedly.
     * @param fn Your callback function
     */
    addSignOutHandler(fn) {
        this.signoutHandlers.push(fn);
    }
    /**
     * Remove a registered signout callback
     * @param fn Your callback function
     */
    removeSignOutHandler(fn) {
        const index = this.signoutHandlers.findIndex((item) => item === fn);
        if (index >= 0) {
            this.signoutHandlers.splice(index, 1);
        }
    }
    /**
     * Sign the current user out of your application.
     */
    signOut() {
        return this.authProvider.signOut();
    }
    /**
     * Used to refresh the auth provider's state if the user is logged in/out in a
     * different process
     */
    reloadAuthState() {
        this.authProvider.loadFromCache();
    }
    createProvider(network, options = {}) {
        return new BitskiBrowserEngine(this.clientId, this.authProvider, this.sdkVersion, network, options);
    }
    onSignOut() {
        this.signoutHandlers.forEach((cb) => {
            cb();
        });
    }
    /**
     * Embeds Bitski's UI styles
     */
    injectStyles() {
        if (document.getElementById('BitskiEmbeddedStyles')) {
            return;
        }
        const style = document.createElement('style');
        style.setAttribute('type', 'text/css');
        style.setAttribute('id', 'BitskiEmbeddedStyles');
        style.appendChild(document.createTextNode(css));
        const head = document.head || document.getElementsByTagName('head')[0];
        head.appendChild(style);
    }
}
