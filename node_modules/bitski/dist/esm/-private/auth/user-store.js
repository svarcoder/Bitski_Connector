import { USER_KEY } from '../constants';
import { LocalStorageStore } from '../utils/localstorage-store';
import { User } from './user';
export class UserStore {
    constructor(clientId, store) {
        this.clientId = clientId;
        this.store = store || new LocalStorageStore();
        this.user = this.fetchUser();
    }
    async getCurrentUser() {
        const user = await this.user;
        return user !== null && user !== void 0 ? user : this.fetchUser();
    }
    get storageKey() {
        return `${USER_KEY}.${this.clientId}`;
    }
    async set(user) {
        this.user = Promise.resolve(user);
        await this.cacheUser(user);
    }
    async clear() {
        this.user = Promise.resolve(undefined);
        await this.cacheUser(undefined);
    }
    loadUserFromCache() {
        this.user = this.fetchUser();
    }
    async fetchUser() {
        const userData = await this.store.getItem(this.storageKey);
        if (userData) {
            return User.fromString(userData);
        }
    }
    async cacheUser(user) {
        if (user) {
            await this.store.setItem(this.storageKey, user.toStorageString());
        }
        else {
            await this.store.clearItem(this.storageKey);
        }
    }
}
