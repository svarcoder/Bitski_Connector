/**
 * Represents a Bitski access token
 */
export class AccessToken {
    /**
     *
     * @param token the access token
     * @param expiresAt the token expiration date (in seconds) (optional)
     * @param scope the scopes this token represents (optional)
     */
    constructor(token, expiresAt, scope) {
        this.token = token;
        this.scope = scope;
        this.expiresAt = expiresAt;
    }
    /**
     * Creates a token from a TokenResponse object
     * @param tokenResponse The token response object to build a token from
     */
    static fromTokenResponse(tokenResponse) {
        let expiresAt;
        if (tokenResponse.expiresIn) {
            expiresAt = Math.floor(Date.now() / 1000) + tokenResponse.expiresIn;
        }
        return new AccessToken(tokenResponse.accessToken, expiresAt, tokenResponse.scope);
    }
    /**
     * Creates a token from a storage string
     * @param s JSON string representing the token
     */
    static fromString(s) {
        let parsed;
        try {
            parsed = JSON.parse(s);
        }
        catch (error) {
            return;
        }
        if (!parsed.token) {
            return;
        }
        return new AccessToken(parsed.token, parsed.expiresAt, parsed.scope);
    }
    /**
     * Calculates if the token is still active
     */
    get expired() {
        if (this.expiresAt) {
            const now = Math.floor(Date.now() / 1000);
            const expiresIn = this.expiresAt - now;
            return expiresIn <= 0;
        }
        return false;
    }
    /**
     * Returns a JSON string suitable for writing in local storage
     */
    toStorageString() {
        return JSON.stringify({
            expiresAt: this.expiresAt,
            scope: this.scope,
            token: this.token,
        });
    }
}
