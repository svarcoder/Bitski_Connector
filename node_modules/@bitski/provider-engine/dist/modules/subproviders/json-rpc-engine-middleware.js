import Subprovider from '../subprovider';
// wraps a json-rpc-engine middleware in a subprovider interface
export class JsonRpcEngineMiddlewareSubprovider extends Subprovider {
    // take a constructorFn to call once we have a reference to the engine
    constructor(constructorFn) {
        super();
        this.constructorFn = constructorFn;
    }
    // this is called once the subprovider has been added to the provider engine
    setEngine(engine) {
        if (this.middleware)
            throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
        const blockTracker = engine._blockTracker;
        const middleware = this.constructorFn({ engine, provider: engine, blockTracker });
        if (!middleware)
            throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
        if (typeof middleware !== 'function')
            throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
        this.middleware = middleware;
    }
    handleRequest(req, next, end) {
        const res = { id: req.id, jsonrpc: '2.0', error: null, result: null };
        this.middleware(req, res, middlewareNext, middlewareEnd);
        function middlewareNext(handler) {
            next((err, result, cb) => {
                // update response object with result or error
                if (err) {
                    delete res.result;
                    res.error = { message: err.message, code: null };
                }
                else {
                    res.result = result;
                }
                // call middleware's next handler (even if error)
                if (handler) {
                    handler(cb);
                }
                else {
                    cb();
                }
            });
        }
        function middlewareEnd(err) {
            if (err) {
                end(new Error(err.message));
            }
            else {
                end(null, res.result);
            }
        }
    }
}
